<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOFAStack on dromara(Open source organization)</title><link>/en/</link><description>Recent content in SOFAStack on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Soul Gateway Learning (2) HTTP Client Access Source Code Parsing</title><link>/en/blog/soul_source_learning_02_http_client_register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/en/blog/soul_source_learning_02_http_client_register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul Learning(2) How Does The Divide Plugin Forward Http Requests</title><link>/en/blog/soul_source_larning_02_divide_plugin_source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/en/blog/soul_source_larning_02_divide_plugin_source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul Learning(2) Use Divide Plugin</title><link>/en/blog/soul_source_learning_02_divide_plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/en/blog/soul_source_learning_02_divide_plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul Learning(1) Environment Configuration</title><link>/en/blog/soul_source_learning_01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/en/blog/soul_source_learning_01/</guid><description>Analysis of soul (1) Set up soul environment soul is a High-Performance Java API Gateway
GitHub：https://github.com/dromara/soul
document：https://dromara.org/zh-cn/docs/soul/soul.html
1. Prepare source code 1.1. Fork dromara/soul repository to my github cchenxi/soul 1.2. Clone the repository git clone https://github.com/cchenxi/soul.git 1.3.Open the source code with idea 1.4. Compile the soul source code You can compile the project as follows.
mvn clean package install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Drat.skip=true -Dcheckstyle.skip=true 2. Startup soul 2.</description></item><item><title>KubeCon China 2019 Co-Located Event SOFAStack Cloud Native Workshop</title><link>/en/activities/sofastack-cloud-native-workshop/</link><pubDate>Tue, 04 Jun 2019 10:20:00 +0000</pubDate><guid>/en/activities/sofastack-cloud-native-workshop/</guid><description>SOFAStack Cloud Native Workshop hosted by Ant Financial (KubeCon China 2019 Co-Located Event) Date: Monday, 24 June, 2019 Time: 9:00 – 16:00 Location: Shanghai Expo Centre Room 616 Registration Fees: Complimentary Register here: https://www.lfasiallc.com/events/kubecon-cloudnativecon-china-2019/co-located-events/#sofastack-cloud-native-workshop Note: This event is hands-on, please bring your personal computer. The language of communication in this workshop is Chinese. SOFAStack (Scalable Open Financial Architecture Stack) is a financial-grade distributed architecture independently developed and open sourced by Ant Financial.</description></item><item><title>Hmily: Easy Handle Highly Concurrent Distributed Transactions</title><link>/en/blog/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/en/blog/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: High-Performance Asynchronous Distributed Transaction TCC Framework</title><link>/en/blog/hmily_introuduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/en/blog/hmily_introuduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item><item><title/><link>/en/projects/soul/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will nominate. Become a committer you will have
Permissions written by Soul repository
Idea is used legally
Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine A committer needs to review every day the Pull Request and issue list to be processed by the community, and assign a suitable committer, that is, Assignee.</description></item><item><title>Build applications on the cloud based on Serverless</title><link>/en/guides/kc-serverless-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/guides/kc-serverless-demo/</guid><description>As one of the developing directions of cloud native technology, Serverless architecture enables you to further improve resource utilization and focus on service development. With our workshop, you can experience new features such as quick creation of Serveless applications, automatic second-level 0-1-N scaling based on service requests, and quick troubleshooting via log viewer.
Workshop procedure Flow diagram Preview Preparation Access to Serverless application service address Login with account and password Git clone this project to local Step 1-1: Publish backend Java application Select Create quickly Select Java Runtime Upload the code package balance-mng.</description></item><item><title>Build microservices with SOFAStack</title><link>/en/guides/sofastack-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/guides/sofastack-quick-start/</guid><description>Procedure This guide introduces how to quickly build a microservice based on SOFAStack. It mainly includes the following steps.
Publish service using SOFABoot and SOFARPC Call service using SOFABoot and SOFARPC View Tracer information reported by SOFATracer via ZipKin View Metrics information via SOFALookout Architecture Tasks 1. Preparation Clone the project demo from GitHub to local
git clone https://github.com/sofastack-guides/kc-sofastack-demo.git Import the project into IDEA or Eclipse. After import, the interface is as follows:</description></item><item><title>Configuration Flow Introduction</title><link>/en/projects/soul/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/config/</guid><description>Description This article introduces the flow of synchronizing to the gateway after the data operation of admin backend system. Usage User can arbitrary modify data in soul-admin backend and this will immediately synchronize to the jvm memory of the gateway.
Synchronize the plugin data of soul,selector,rule data, metadata, signature data, etc.
All the rules of plugin selectors are dynamically configured and take effect immediately without restarting the service.</description></item><item><title>Data Synchronization Design</title><link>/en/projects/soul/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/data-sync/</guid><description>Description This article mainly explains three ways of database synchronization and their principles. Preface Gateway is the entrance of request and it is a very important part in micro service architecture,therefore the importance of gateway high availability is self-evident.When we use gateway,we have to change configuration such as flow rule,route rule for satisfying business requirement.Therefore,the dynamic configuration of the gateway is an important factor to ensure the high availability of the gateway.</description></item><item><title>Database Design</title><link>/en/projects/soul/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/database-design/</guid><description>Plugin use database to store plugin,selector,rule configuration data and relationship.
Database Table UML Diagram:
Detailed design:
one plugin corresponds to multiple selectors,one selector corresponds to multiple rules.
one selector corresponds to multiple match conditions,one rule corresponds to multiple match conditions.
Each rule handles differently in corresponding plugin according to field handler,field handler is a json string.You can view detail during the use of admin.</description></item><item><title>Dubbo Quick Start</title><link>/en/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-dubbo/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-dubbo Module Configuring（hmily-demo-dubbo-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Dubbo user guide</title><link>/en/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-dubbo/</guid><description>The Dubbo Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with Dubbo implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Environment Setup</title><link>/en/projects/soul/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/soul-set-up/</guid><description>Features soul is an open source plugin framework, which is flexibility and extensibility since 2.2.0 version. With soul you can easily create application with your own gateway. System Requirment: JDK 1.8+, Mysql 5.0 +. Invoke Soul-Admin Download soul-admin.jar, then run it with arguments. ```yaml &amp;gt; wget https://yu199195.github.io/jar/soul-admin.jar java -jar soul-admin.jar &amp;ndash;spring.datasource.url=&amp;ldquo;jdbc:mysql://yoururl:3306/soul?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=false&amp;rdquo; &amp;ndash;spring.datasource.username=&amp;lsquo;you username&amp;rsquo; &amp;ndash;spring.datasource.password=&amp;lsquo;you password&amp;rsquo; * Visit `http://localhost:9095/index.html ` default username：a</description></item><item><title>Fetching correct IP address and host</title><link>/en/projects/soul/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/custom-parsing-ip-and-host/</guid><description>description This doc demonstrates how to get correct IP address and host when soul serves behind nginx reverse proxy.
After fetched real IP and host, you can match them with plugins and selectors.
default implementation The embedded implementation in soul is :org.dromara.soul.web.forwarde.ForwardedRemoteAddressResolver。
You need to config X-Forwarded-For in nginx first to get correct IP address and host.
implement through a plugin Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.</description></item><item><title>Grpc Quick Start</title><link>/en/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-grpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA) and Locate on hmily-demo-grpc Module Configuring（hmily-demo-grpc-accoun module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?useUnicode=true&amp;amp;characterEncoding=utf8 # replace with your db_host_ip and db_host_port username: root # replace with your db username password: your_password # replace with your db user password Modify hmily.</description></item><item><title>Grpc User Guide</title><link>/en/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-grpc/</guid><description>Grpc User Guide Unary synchronous calls to GRPC are supported only at present.
Introduce the jar packages
Introduce the Hmily configuration
Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-grpc dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-grpc&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:
&amp;lt;!--Configure the base packages that the Hmily framework need to scan --&amp;gt; &amp;lt;context:component-scan base-package=&amp;quot;org.</description></item><item><title>Hmily Annotation</title><link>/en/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } This annotation is the interface identification of Hmily Distributed Transaction,it indicated that the interface participates in Hmily Distributed Transaction. @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the string */ String confirmMethod() default &amp;quot;&amp;quot;; /** * Cancel method string. * * @return the string */ String cancelMethod() default &amp;quot;&amp;quot;; /** * Pattern pattern enum.</description></item><item><title>Hmily Introduction</title><link>/en/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/overview/</guid><description>What&amp;rsquo;s Hmily？ Hmily is a high-performance, zero penetration, financial-level distributed transactions solution. At present, it mainly provides support for flexible transactions, including TCC, TAC (in which, it will automatically generate rollback SQL) schemes, and XA and more schemes will be supported in the future.
Features High reliability : It supports abnormal transaction rollback and transaction overtime abnormal recovery to prevent transaction suspension in distributed scenarios.
Ease of use : It provides zero penetration Spring-Boot and Spring-Namespace schemes to integrate with business systems quickly.</description></item><item><title>Hmily Metrics</title><link>/en/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/metrics/</guid><description>Hmily Metrics At present,Prometheus is used to collect metrics in hmily&amp;rsquo;s metrics module, and the pull mode is used to expose metrics information interface.
The metrics collected fall into two fundamental categories:
JVM information to application: Memory, CPU, Thread Usage, etc.
Transaction information: including the transactions total, the transaction latency, the transaction status, the transaction role.
Hmily Metrics in detail How to show You can pull the metrics information from the metrics configuration of application via Grafana.</description></item><item><title>Hmily Team</title><link>/en/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/team/</guid><description> Project members (the names not listed in order) Name github Role Company Xiao Yu yu199195 VP JD Zhang Yong Lun tuohai666 committer JD Zhao Jun cherrylzhao committer China Unicom Chen Bin prFor committer A startup company Jiang Xiao Feng SteNicholas committer Alibaba Cloud Li Lang cysy-lli committer Ctrip Tang Yi Dong tydhot committer perfma</description></item><item><title>Hmily Term</title><link>/en/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/term/</guid><description>Term Initiator: The initiator of a global transaction, the first place where transactions need to be performed on distributed resources in a request link resource method. In the Hmily framework, it can be expressed as: a request first encounters @HmilyTCC or @HmilyTAC annotated method, the method which application belongs to is called the initiator.
Participants: Distributed services or resources that need to participate in a distributed transaction scenario together with other services.</description></item><item><title>Hmily Transaction Context</title><link>/en/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/context/</guid><description>Hmily Transaction Context @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * Transaction Participant Role. */ private int role; /** * transType. */ private String transType; } HmilyTransactionContext is the core class used by the Hmily distributed transaction framework to pass the transaction context when making RPC calls.</description></item><item><title>Hmily-Admin</title><link>/en/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/admin/</guid><description>Hmily-Admin startup tutorial (not completed）: Admin is the background management system for viewing transaction logs in Hmily. It has many features, Such as viewing abnormal logs, modifying the number of retries and so on.
First, make sure that your project is using Hmily and is running properly.
Second, the JDK used by the user must be 1.8+. Git and Maven are installed locally, then execute the following command</description></item><item><title>Hmily-Config</title><link>/en/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config/</guid><description>Configuration Detail： File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
hmily: server: configMode: local appName: xiaoyu # The following configuration will be read when server.configMode equals local config: appName: xiaoyu serializer: kryo contextTransmittalMode: threadLocal scheduledThreadMax: 16 scheduledRecoveryDelay: 60 scheduledCleanDelay: 60 scheduledPhyDeletedDelay: 600 scheduledInitDelay: 30 recoverDelayTime: 60 cleanDelayTime: 180 limit: 200 retryMax: 10 bufferSize: 8192 consumerThreads: 16 asyncRepository: true autoSql: true phyDeleted: true storeDays: 3 repository: mysql repository: database: driverClassName: com.</description></item><item><title>Hmily-Config-Apollo</title><link>/en/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-apollo/</guid><description>Local Configuration File Name : hmily.yml.
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = apollo
The framework will pull the configuration according to your configured apollo.
hmily: server: configMode: apollo appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Consul</title><link>/en/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-consul/</guid><description>Local Configuration File Name: hmily.yml。
Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = consul
The framework will pull the configuration according to your configured consul.
hmily: server: configMode: consul appName: xxxxx remote: consul: hostAndPort: 127.</description></item><item><title>Hmily-Config-Etcd</title><link>/en/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-etcd/</guid><description>Local Configuration File Name: hmily.yml. Path: The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource The specific contents are as follows : Notice setting hmily.server.configMode = etcd The framework will pull the configuration according to your configured etcd. hmily: server: configMode: etcd appName: xxxxx # The following</description></item><item><title>Hmily-Config-Local</title><link>/en/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-local/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = local
All configurations of the framework base on your local configuration files.
Notice that the configurations of repository are extensions of SPI, you can select one from those modes, which don&amp;rsquo;t have to be configured all.</description></item><item><title>Hmily-Config-Nacos</title><link>/en/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-nacos/</guid><description>Local Conguration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = naocs
The framework will pull the configuration from your configured nacos.
hmily: server: configMode: nacos appName: # The following configuration will be read when server.</description></item><item><title>Hmily-Config-Zookeeper</title><link>/en/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/config-zookeeper/</guid><description>Local Configuration File Name: hmily.yml。
Path： The default path is the resource directory of the project, which can be specified by -Dhmily.conf, and you can also put the configuration in user.dir directory. Priority: -Dhmily.conf &amp;gt; user.dir &amp;gt; resource
The specific contents are as follows : Notice setting hmily.server.configMode = zookeeper
The framework will pull the configuration from your configured zookeeper.
hmily: server: configMode: zookeeper appName: # The following configuration will be read when server.</description></item><item><title>Hmily-TAC</title><link>/en/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/tac/</guid><description>TAC The TAC mode is actually a variant of the TCC mode. Just as the name implies, the TAC mode is called automatic rollback. As compared with the TCC mode, the user doesn&amp;rsquo;t have to concern about how to write the rollback method at all. and then it can reduces user development volume and is entirely transparent to users.
TAC Mode is only suitable for Relational Database.
TAC Mode will intercept the user&amp;rsquo;s SQL statement to generate reverse rollback SQL, and the compatibility of SQL will also be a ordeal.</description></item><item><title>Hmily-code-conduct</title><link>/en/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/code-conduct/</guid><description>Development Guidelines Intentions Write codes with heart. Pursue clean, simplified and extremely elegant codes. Readable The code is unambiguous, and the intention of the code is revealed through reading rather than debugging. Tidy Agree with concepts in and . Consistent Be familiar with codes already had, to keep consistent with the style and use. Simplified Express meaning with the least code. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time.</description></item><item><title>Hmily-committer</title><link>/en/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/committer/</guid><description>Committer Promotion After you have made a lot of contributions, the community will invite you join Committers
Become a committer you will have
Hmily repository write permissions
Idea free license
Committer Responsibilities Develop new features; Refactor codes; Review pull requests reliably and in time; Consider and accept feature requests; Answer questions; Update documentation and example; Improve processes and tools; Guide new contributors join community. Committer Routine Committer needs to check the list of pull requests and issues to be processed in the community on a daily basis and assign them to the appropriate committer, that is, assignee.</description></item><item><title>Hmily-contributor</title><link>/en/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>Hmily-tcc</title><link>/en/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/tcc/</guid><description>TCC The TCC Mode is a classic flexible transaction solution that needs the users to provided try, confirm, cancel methods. The try, confirm methods will be invoked under normal circumstances,and the try, cancel methods will be invoked as an exception occurs. the confirm method is not required,it entirely depends on the users how to implement the try method. the both confirm and cancel method also need the users to guarantee the idempotency, but it will bring addtional workload to the users.</description></item><item><title>Integrate Http with soul gateway</title><link>/en/projects/soul/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/http-proxy/</guid><description>Features This chapter is a guide about integrating Http service with soul gateway.
soul gateway uses divide plugin handling http request, pls enable it in soul-admin backgroud.
Pls start soul-admin successfully beofore integrating , and Environement Setup is Ok.
Configure soul gateway as Http proxy. Add these dependencies in gateway&amp;rsquo;s pom.xml： ```xml org.dromara soul-spring-boot-starter-plugin-divide ${last.version} org.dromara soul-spring-boot-starter-plugin-httpclient ${last.version}</description></item><item><title>Integrate dubbo with soul gateway</title><link>/en/projects/soul/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/dubbo-proxy/</guid><description>Features This chapter is a guide about integrating dubbo service with soul gateway.
Support alibaba dubbo（&amp;lt; 2.7.x）and apache dubbo (&amp;gt;=2.7.x).
Pls start soul-admin successfully beofore integrating , and Environement Setup is Ok.
Configure soul gateway as dubbo proxy Add these dependencies in gateway&amp;rsquo;s pom.xml：
alibaba dubbo user, configure the dubbo version and registry center with yours. &amp;lt;!--soul alibaba dubbo plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>MetaData Concept Design</title><link>/en/projects/soul/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/meta-data/</guid><description>Description This article mainly explains the concept,design of metadata and how to connect in the soul gateway. Technical solutions Add a new table in the database,and data can synchronize to the JVM memory of gateway according to the data synchronization scheme.
Table Structure:
CREATE TABLE IF NOT EXISTS `meta_data` ( `id` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;id&#39;, `app_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;application name&#39;, `path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path,not repeatable&#39;, `path_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;path description&#39;, `rpc_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;rpc type `service_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;service name&#39;, `method_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;method name&#39;, `parameter_types` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;multiple parameter types, split by comma&#39;, `rpc_ext` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NULL DEFAULT NULL COMMENT &#39;rpc extension information,json format&#39;, `date_created` datetime(0) NOT NULL COMMENT &#39;create date&#39;, `date_updated` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;update date&#39;, `enabled` tinyint(4) NOT NULL DEFAULT 0 COMMENT &#39;enable status&#39;, PRIMARY KEY (`id`) USING BTREE ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Metadata design as below,the most important is using it in dubbo&amp;rsquo;s generalization call.</description></item><item><title>Motan Quick Start</title><link>/en/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-motan/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Configuring（hmily-demo-motan-account module for instance） Configure with your business database in application.yml(account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>Motan User Guide</title><link>/en/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-motan/</guid><description>Motan Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions. public interface HelloService { @Hmily void say(String hello); } The project with Motan implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>Myth Introduction</title><link>/en/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/myth/overview/</guid><description>myth 采用消息队列解决分布式事务的开源框架, 基于java语言来开发（JDK1.8），支持dubbo，springcloud,motan等rpc框</description></item><item><title>Put Service Mesh into practice with CloudMesh</title><link>/en/guides/kc-cloud-mesh-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/guides/kc-cloud-mesh-demo/</guid><description>To run this demo, you should sign up an Ant Financial technology account. Please see Ant Finanical Official Site to see more details.
Demo content Service Mesh applies the communication capabilities between services to the infrastructure, thus decoupling and lightweighting applications.
However, Service Mesh itself is still complex. CloudMesh can easily implement Service Mesh technology by hosting Service Mesh on the cloud.
With our workshop, you can easily deploy applications developed in multiple programming languages ​​to CloudMesh, thereby experiencing the capabilities of Service Mesh.</description></item><item><title>Questions</title><link>/en/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/faq/</guid><description>I have imported the jar package to my project, but found that my project cannot be started, what should I do if any error reported? Answer : When you meet this kind of error, it requires you to locate the problem yourself, you can check the items as bellow: check whether the framework configuration is carried out according to the document whether your project runtime environment is correct whether there is any dependency conflict problem If your problem is still present after above check items, you can provide an issue on github of this project, our team will provide technique support as soon as possible.</description></item><item><title>Raincat Introduction</title><link>/en/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/raincat/overview/</guid><description>Raincat 强一致性分布式事务，是基于二阶段提交+本地事务补偿机制来实现。原理介绍 基于java语言来开发（JDK1.8），支持dubbo,motan,</description></item><item><title>SOFA-RPC User Guide</title><link>/en/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-rpc/</guid><description>SOFA-RPC Interface Sectioon Introduce the jar packages into your interface project. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Add the @Hmily annotation on the interface method in which you need to perform Hmily distributed transactions.
public interface HelloService { @Hmily void say(String hello); } The project with SOFA-RPC implementation Step 1 ： Introduce the jar package of the hmily dependency
Step 2 ： Add Hmily configuration</description></item><item><title>SOFABoot dynamic module practice</title><link>/en/guides/kc-sofastack-dynamic-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/guides/kc-sofastack-dynamic-demo/</guid><description>Background kc-sofastack-demo has introduced how to quickly build an e-commerce microservice application and has implemented the service calling link tracking and application status monitoring.
In e-commerce system, the platforms often are not satisfied with the default product listing order, and always want to arrange some products in the conspicuous places. Also, there are some cases where the platforms would like to show different products to different users based on the collected user behaviors.</description></item><item><title>Seata distributed transaction practice</title><link>/en/guides/kc-seata-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/guides/kc-seata-demo/</guid><description>SEATA Demo for SOFAStack Cloud Native Workshop on KubeCon China 2019
AT mode 1.Introduce maven dependencies Introduce the following dependencies into the POM file of the parent project (seata-demo-at/pom.xml):
... &amp;lt;properties&amp;gt; ... &amp;lt;seata.version&amp;gt;0.6.1&amp;lt;/seata.version&amp;gt; &amp;lt;netty4.version&amp;gt;4.1.24.Final&amp;lt;/netty4.version&amp;gt; &amp;lt;/properties&amp;gt; ... &amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; ... &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.seata&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;seata-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${seata.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.seata&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;seata-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${seata.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;servlet-api&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${netty4.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; Introduce the following dependencies into the POM file of the stock-mng project (seata-demo-at/stock-mng/pom.</description></item><item><title>Soul Introduction</title><link>/en/projects/soul/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/overview/</guid><description>What is the Soul？ This is an asynchronous, high-performance, cross-language, responsive API gateway.I hope that something can protect your micro service like a soul.After referring to excellent gateways such as Kong, Spring-Cloud-Gateway, soul was born standing on the shoulders of giants!
Features Support various languages (http protocol), support dubbo, spring cloud protocol.
Plugin design idea, plugin hot swap, easy to expand.
Flexible flow filtering to meet various flow control.</description></item><item><title>Spring Cloud User Guide</title><link>/en/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-springcloud/</guid><description>Spring-Cloud User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Step 4: Add @Hmily annotation on the feignClient call method(Consumer side).
1.Introduce The Maven dependency Spring-Namespace Introduce the hmily-springcloud dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below: &amp;lt;!</description></item><item><title>SpringCloud Quick Start</title><link>/en/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-springcloud/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-dubbo Module and Run Build with Maven Run with EurekaServerApplication.java in hmily-demo-springcloud-eureka project. Configuring（hmily-demo-springcloud-account module for instance） Configure with your business database (account module for instance) spring: datasource: driver-class-name: com.</description></item><item><title>Tars Quick Start</title><link>/en/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-tars/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Setting tars nodes Build tars nodes with following information refering to here:
APP: TestInventory, Server Name: InventoryApp, OBJ: InventoryObj, Port: 29740 APP: HmilyAccount, Server Name: AccountApp, OBJ: AccountObj, Port: 10386 With nodes built, run mvn clean package packaging command respectively under hmily-demo-tars-springboot-account and hmily-demo-tars-springboot-inventory directories, and publish with outputs on previous nodes set.</description></item><item><title>Tars User Guide</title><link>/en/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/user-tars/</guid><description>Tars User Guide Step 1: Introduce the jar packages
Step 2: Introduce the Hmily configuration
Step 3: Add @Hmily annotation on the auto-generated Servant interface method which required the Hmily Distributed Transaction.
Step 4: Add @HmilyTCC or @HmilyTAC annotation on the concrete implementation method(Service provider).
Introduce The Maven dependency Spring-Namespace
Introduce the hmily-tars dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-tars&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; make the configuration in the XML configuration file as below:</description></item><item><title>Team Introduction</title><link>/en/projects/soul/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/team/</guid><description>Team Member（In no particular order） |Name | Github | Role | Company | |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- |:&amp;mdash;&amp;mdash;-: |:&amp;mdash;&amp;mdash;-:| |Xiao Yu |yu199195 | VP | jd.com | |Zhang Yonglun |tuohai666 | PMC | jd.com | |Deng Liming |dengliming | PMC | a start-up company | |Tang Yudong |tydhot | PMC | perfma | |Zhang lei |SaberSola | PMC | helloglobal | |Chen Bing |prFor | PMC | a start-up company | |Huang Xiaofeng |huangxfchn | committer | shein | |Liang Ziqiang |241600489 | committer | didi | |zhuang hao chao |dmsolr | committer | YY |</description></item><item><title>customising response structure</title><link>/en/projects/soul/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/custom-result/</guid><description>description This doc offers examples for customising response structure. The response body structure in gateways should be unified, it is recommended for specify yours. default implementation The default implementation class is org.dromara.soul.plugin.api.result.DefaultSoulResult Following is the response structure: public class SoulDefaultEntity implements Serializable { private static final long serialVersionUID = -2792556188993845048L; private Integer code; private String message; private Object data; } The returned json as follows: { &amp;quot;code&amp;quot;: -100, //response code,</description></item><item><title>dict management</title><link>/en/projects/soul/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/dictionary-management/</guid><description>Explanation Dictionary management is primarily used to maintain and manage common data dictionaries. Table design sql sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;primary key id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;type&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary encoding&#39;, `dict_name` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;dictionary name&#39;, `dict_value` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary value&#39;, `desc` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;dictionary description or remarks&#39;, `sort` int(4) NOT NULL COMMENT &#39;sort&#39;, `enabled` tinyint(4) DEFAULT NULL COMMENT &#39;whether it is enabled&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci; * The current usage scenario is when the plugin handle configuring the data_type=3 (select box) eg.</description></item><item><title>file uploading and downloading</title><link>/en/projects/soul/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/file-and-image/</guid><description> description This doc gives a brief description for uploading and downloading files using soul. file uploading The default file size limit is 10M.
For custom limitation, use--file.size with an integer variable. e.g.--file.size = 30
Upload your files just as way you did before
file downloading Soul supports downloading files in streams. There is no need to change anything.</description></item><item><title>filter extension</title><link>/en/projects/soul/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/custom-filter/</guid><description>description This doc shows a demo for how to extend org.springframework.web.server.WebFliter. CORS support org.dromara.soul.bootstrap.cors.CrossFilter is designed for WebFilter implementation. public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final String ALLOWED_EXPOSE = &amp;quot;*&amp;quot;; private static final String MAX_AGE = &amp;quot;18000&amp;quot;; @Override @SuppressWarnings(&amp;quot;all&amp;quot;) public Mono&amp;lt;Void&amp;gt; filter(final ServerWebExchange exchange, final WebFilterChain chain) { ServerHttpRequest request = exchange.</description></item><item><title>performance optimization for soul</title><link>/en/projects/soul/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/soul-optimize/</guid><description>description This doc shows how to do performance optimization for soul. time consumption Soul is JVM driven and processing time for a single request is nearly between 1 - 3 ms. netty optimization spring-webflux is one of dependencies of soul, and it uses Netty in lower layer.
The demo down below demonstrates tuning soul by customizing params in Netty.
@Bean public NettyReactiveWebServerFactory nettyReactiveWebServerFactory() { NettyReactiveWebServerFactory webServerFactory = new NettyReactiveWebServerFactory(); webServerFactory.</description></item><item><title>plugin handle explanation</title><link>/en/projects/soul/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/plugin-handle-explanation/</guid><description>Explanation In our Soul-Admin background, each plugin uses the Handle field to represent a different processing, and plugin processing is used to manage and edit custom processing fields in JSON. This feature is mainly used to support the plug-in handling template configuration Table design sql
CREATE TABLE IF NOT EXISTS `plugin_handle` ( `id` varchar(128) NOT NULL, `plugin_id` varchar(128) NOT NULL COMMENT &#39;plugin id&#39;, `field` varchar(100) NOT NULL COMMENT &#39;field&#39;, `label` varchar(100) DEFAULT NULL COMMENT &#39;label&#39;, `data_type` smallint(6) NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;data type 1 number 2 string 3 select box&#39;, `type` smallint(6) NULL COMMENT &#39;type, 1 means selector, 2 means rule&#39;, `sort` int(4) NULL COMMENT &#39;sort&#39;, `ext_obj` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT &#39;extra configuration (json format data)&#39;, `date_created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;create time&#39;, `date_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;update time&#39;, PRIMARY KEY (`id`), UNIQUE KEY `plugin_id_field_type` (`plugin_id`,`field`,`type`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic; Tutorial eg.</description></item><item><title>plugin-context-path-mapping</title><link>/en/projects/soul/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/context-path-plugin/</guid><description>Explanation When making invokes to the target service, soul Gateway also allows users to customize the context using the context_path plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; context_path ,set to enable。
Introduce context_path support in the pox.xml file of the gateway.
If the user don&amp;rsquo;t use, please disable the plugin in the background.
&amp;lt;!-- soul context_path plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-context-path&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>plugin-divide</title><link>/en/projects/soul/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/divide-plugin/</guid><description>Explanation Divdid is the core processing plugin for gateway to process http requests. Plugin Setting Enable plugin, soul-admin &amp;ndash;&amp;gt; plugin management&amp;ndash;&amp;gt; divide set to enable.
Divide plugin，cooperate with starter to take effect，please refer to：user-http。
&amp;lt;!--if you use http proxy start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-divide&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Detail Divide is a plugin for http forward proxy, and all http requests are called by this plugin in load balancing.</description></item><item><title>plugin-dubbo</title><link>/en/projects/soul/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/dubbo-plugin/</guid><description>Explanation Dubbo is a plugin that converts http protocol into Dubbo protocol, and it is also the key for gateway to realize dubbo generic service.
Dubbo plugin needs to cooperate with metadata to realize dubbo calls, please refer to: metaData。
Apache dubbo and alibaba dubbo users both use the same plugin.
&amp;lt;!--if you use dubbo start this--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-alibab-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-apache-dubbo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>plugin-hystrix</title><link>/en/projects/soul/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/hystrix-plugin/</guid><description>Explanation Hystrix plugin is the core implementation used by gateway to fuse traffic.
Use semaphores to process requests.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; hystrix, set to enable.
If the user don&amp;rsquo;t use, please disable the plugin in the backgroud.
Plugin Instruction Introduce hystrix dependency in the pom.xml file of the gateway. xml &amp;lt;!-- soul hystrix plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>plugin-monitor</title><link>/en/projects/soul/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/monitor-plugin/</guid><description>Explanation monitor plugin is used to monitor its own running status(JVM-related) by gateway, include request response delay, QPS, TPS, and other related metrics. Technical Solutions Flow Diagram Make even tracking in soul gateway by asynchronous or synchronous mode.
The prometheus server pulls metrics&amp;rsquo; through http request, and then displays it by Grafana.
Plugin Setting In soul-admin&amp;ndash;&amp;gt; plugin management-&amp;gt; monitor, set to enable.</description></item><item><title>plugin-rateLimiter</title><link>/en/projects/soul/ratelimiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/ratelimiter-plugin/</guid><description>Explanation rateLimiter is core implementation of gateway restrictions on network traffic.
You can set to the interface level or the parameter level. How to use it depends on your traffic configuration.
Technical Solution Using redis token bucket algorithm to limit traffic.
Flow Diagram： Plugin Setting In soul-admin&amp;ndash;&amp;gt; plugin management&amp;ndash;&amp;gt; rate_limiter set to enable.
Configure redis in the plugin.
Currently, supporting redis patterns of single, sentinel, and cluster.</description></item><item><title>plugin-resilience4j</title><link>/en/projects/soul/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/resilience4j-plugin/</guid><description>Explanation resilience4j is one of the options that supports flow control and circuit breaking.
resilience4j supports flow control and circuit breaking functions for gateway.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; resilience4j set to enable.
If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin.
Plugin Usage Introducing the follow supports to the pom.xml file of soul project.</description></item><item><title>plugin-rewrite</title><link>/en/projects/soul/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/rewrite-plugin/</guid><description>Explanation When making proxy invokes to the target service, soul Gateway also allows users to rewrite the request path using the rewrite plugin. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; rewrite ,set to enable。
Introduce rewrite support in the pox.xml file of the gateway.
If the user don&amp;rsquo;t use, please disable the plugin in the backgroud.
&amp;lt;!-- soul rewrite plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>plugin-sentinel</title><link>/en/projects/soul/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/sentinel-plugin/</guid><description>Explanation Sentinel is one of the options that supports flow control and circuit breaking.
Sentinel supports flow control and circuit breaking functions for gateway.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; sentinel set to enable.
If you don&amp;rsquo;t want to use it, please close the plugin in soul-admin.
Plugin Usage Introducing the follow supports to the pom.xml file of soul project.</description></item><item><title>plugin-sign</title><link>/en/projects/soul/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/sign-plugin/</guid><description>Explanation Sign is a native plugin of soul Gateway and is used to process signature authentication of requests. Plugin Setting In soul-admin -&amp;gt; plugin management &amp;ndash;&amp;gt; sign set to enable. Plugin Usage Introducing sign dependency in the pom.xml file of the gateway &amp;lt;!-- soul sign plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sign&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- soul sign plugin end--&amp;gt; Selectors and rules, please refer to: selector。</description></item><item><title>plugin-springcloud</title><link>/en/projects/soul/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/spring-cloud-plugin/</guid><description>Explanation This plugin is the core of transforming http protocol into springCloud protocol. Introducing Plugin Support of SpringCould Gateway Introducing those dependencies in the pom.xml file of the gateway. &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-httpclient&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-commons&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-ribbon&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.0.RELEASE&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; springCloud ,set to enable.</description></item><item><title>plugin-waf</title><link>/en/projects/soul/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/waf-plugin/</guid><description>Explanation Waf is the core implementation of gateway to realize firewall function for network traffic. Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management-&amp;gt; waf set to enable.
If the user don&amp;rsquo;t use, please disable the plugin in the backgroud.
Add configuration mode in plugin editing.
{&amp;quot;model&amp;quot;:&amp;quot;black&amp;quot;} # The default mode is blacklist mode; If setting is mixed, it will be mixed mode. We will explain it specifically below.</description></item><item><title>plugin-websocket</title><link>/en/projects/soul/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/websocket-plugin/</guid><description>Explanation Soul gateway also support proxy of websocket.
In websocket support, divide plugin is used in it.
Plugin Setting In soul-admin &amp;ndash;&amp;gt; plugin management &amp;ndash;&amp;gt; divide, set to enable.
Introducing dependencies in the pom.xml file of the gateway ```xml org.dromara soul-spring-boot-starter-plugin-divide ${last.version}
org.dromara soul-spring-boot-starter-plugin-httpclient ${last.version}
## Request Path * When using soul proxy websocket, its request path is (example):`ws://localhost:9195/?</description></item><item><title>plugins</title><link>/en/projects/soul/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/custom-plugin/</guid><description>description Plugins are core executors of soul gateway. Every plugin handles matched requests when enabled.
There are two kinds of plugins in the soul gateway:
The first type is a call chain with a single responsibility, and traffic cannot be customized.
The other one can do its own chain of responsibility for matched traffic.
You could reference from soul-plugin module and develop plugins by yourself.</description></item><item><title>selector detailed explanation</title><link>/en/projects/soul/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/selector-and-rule/</guid><description>Features selector and rule are the key point of soul gateway, you can manage any request with it.
this chapter is mainly focus on the concepts of selector and rule and how to use it.
overview one plugin has many selector and a selector has many rules, selector is the first filter of request, and the rule is the final filter.
pls consider this, it would be perfect when the plugin executes the request until it reached the config value.</description></item><item><title>sofa access soul gateway</title><link>/en/projects/soul/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/sofa-plugin/</guid><description>Description The sofa plug-in is a plug-in that converts the HTTP protocol into the sofa protocol, and it is also the key to the gateway to realize the sofa generalization call.
sThe sofa plug-in needs to cooperate with metadata to realize the call of Dubbo. Please refer to: Metadata。
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-sofa&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Plug-in&amp;rsquo;s Settings First, go to soul-admin &amp;ndash;&amp;gt; plug-in management-&amp;gt; setting sofa is open 。</description></item><item><title>sofa access soul gateway</title><link>/en/projects/soul/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/sofa-rpc-proxy/</guid><description>Description This article is about sofa users using sofa plug-in support,and the tutorial of connecting your own sofa service to the soul gateway. Before connecting, please start soul-admin correctly and Setup Environment Ok。 Introduce the plug-in that the gateway supports for sofa Add the following dependencies in the gateway&amp;rsquo;s pom.xml file：
Replace the sofa version with yours, and replace the jar package in the registry with yours, The following is a reference。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description></item><item><title>sofa-rpc Quick Start</title><link>/en/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/hmily/quick-start-rpc/</guid><description>Prerequisites JDK 1.8+ Maven 3.2.x Git Zookeeper Cloning the GitHub Repository and Quick Installation &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U Executing SQL(s) in Demo Module sql
Open with Your Favourite Editor (IDEA), Locate on hmily-demo-sofa Module and Run Build with Maven Configuring（hmily-demo-sofa-account module for instance） Configure with your business database in application.yml spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://&amp;lt;db_host_ip&amp;gt;:&amp;lt;db_host_port&amp;gt;/hmily_account?</description></item><item><title>soul-code-conduct</title><link>/en/projects/soul/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/code-conduct/</guid><description>Development Guidelines Write codes with heart. Pursue clean, simplified and extremely elegant codes. Agree with concepts in &amp;lt;Refactoring: Improving the Design of Existing Code&amp;gt; and &amp;lt;Clean Code: A Handbook of Agile Software Craftsmanship&amp;gt;. Be familiar with codes already had, to keep consistent with the style and use. Highly reusable, no duplicated codes or configurations. Delete codes out of use in time. Contributor Covenant Submitting of Conduct Make sure all the test cases are passed, Make sure .</description></item><item><title>soul-contributor</title><link>/en/projects/soul/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/contributor/</guid><description>You can report a bug, submit a new function enhancement suggestion, or submit a pull request directly.
Submit an Issue Before submitting an issue, please go through a comprehensive search to make sure the problem cannot be solved just by searching. Check the Issue List to make sure the problem is not repeated. Create a new issue and choose the type of issue. Define the issue with a clear and descriptive title.</description></item><item><title>specify sign plugins for examination</title><link>/en/projects/soul/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/custom-sign-algorithm/</guid><description>description Users can customize the signature authentication algorithm to achieve verification. extension The default implementation is org.dromara.soul.plugin.sign.service.DefaultSignService。
Declare a new class named &amp;ldquo;A&amp;rdquo; and implements org.dromara.soul.plugin.api.SignService。
public interface SignService { /** * Sign verify pair. * * @param exchange the exchange * @return the pair */ Pair&amp;lt;Boolean, String&amp;gt; signVerify(ServerWebExchange exchange); } When returning ture in Pair, the sign verification passes. If there&amp;rsquo;s false, the String in Pair will be return to the frontend to show.</description></item><item><title>springCloud with soul gateway</title><link>/en/projects/soul/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/spring-cloud-proxy/</guid><description>Features this article is a guide about how to integrate Spring Cloud with soul gateway quickly.
pls enable springCloud plug-in in soul-admin background.
Pls start soul-admin successfully beofore integrating , and Environement Setup is Ok.
Configure soul gateway as Spring Cloud proxy add these dependencies in gateway&amp;rsquo;s pom.xml: &amp;lt;!--soul springCloud plugin start--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-plugin-springcloud&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--soul springCloud plugin end--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description></item><item><title>thread model</title><link>/en/projects/soul/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/thread/</guid><description>description This article gives an introduction to thread models in soul and usage in various scenarios. io and work thread spring-webflux is one of dependencies of soul, and it uses Netty thread model in lower layer. business thread Use scheduling thread to execute by default.
A fixed thread pool manages business threads, the number of threads is count in this formula: cpu * 2 + 1.</description></item><item><title>use different data-sync strategy.</title><link>/en/projects/soul/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/use-data-sync/</guid><description>Features Data synchronization is the key of gateway high performance, which is to sync &amp;lsquo;soul-admin&amp;rsquo; config data into the JVM memory of soul cluster.
Implementation principles, pls refer to：dataSync。
In the article, the gateway is the environment you setup. please refer to：Environment Setup.
Websocket sync（default method，recommend） gateway setting（note:restart）
Add these dependencies in pom.xml：
&amp;lt;!--soul data sync start use websocket--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;soul-spring-boot-starter-sync-data-websocket&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${last.</description></item><item><title>多语言http客户端</title><link>/en/projects/soul/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/en/projects/soul/developer-soul-client/</guid><description>说明 本文主要讲解其他语言的http服务如何接入网关。 如何自定义开发 soul-http-client 自定义开发 请求方式：POST 请求路径 http://soul-admin/soul-client/springmvc-register soul-admin，表示为 adm</description></item></channel></rss>