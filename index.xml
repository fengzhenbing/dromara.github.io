<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOFAStack on dromara(Open source organization)</title><link>/</link><description>Recent content in SOFAStack on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Soul网关学习(2-3)Http客户端接入源码解析</title><link>/blog/soul_source_learning_02_http_client_register/source-learning-02-http-client-register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_http_client_register/source-learning-02-http-client-register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul网关学习(2-2)Http代理之divide插件源码解析</title><link>/blog/soul_source_learning_02_divide_plugin_source/source-learning-02-divide-plugin-source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_divide_plugin_source/source-learning-02-divide-plugin-source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul网关学习(2-1)Http代理之divide插件使用</title><link>/blog/soul_source_learning_02_divide_plugin/source-learning-02-divide-plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_divide_plugin/source-learning-02-divide-plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul网关学习(1)环境配置</title><link>/blog/soul_source_learning_01/source-learning-01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_01/source-learning-01/</guid><description>Soul源码分析（1） 环境配置 soul is a High-Performance Java API Gateway GitHub：https://github.com/dromara/soul 官方文档：https</description></item><item><title>Service Mesh Webinar#2：基于 MOSN 和 Istio Service Mesh 的服务治理实践</title><link>/activities/service-mesh-webinar-2/</link><pubDate>Tue, 14 Jul 2020 15:00:00 +0800</pubDate><guid>/activities/service-mesh-webinar-2/</guid><description>概要 活动主题：Service Mesh Webinar#2：基于 MOSN 和 Istio Service Mesh 的服务治理实践 活动时间：7 月 22 日周四晚 8 点 活动形式：线上直播 报名方式：戳这里</description></item><item><title>SOFAChannel#17：网络通信框架 SOFABolt 的功能介绍及协议框架解析</title><link>/activities/sofa-channel-17/</link><pubDate>Fri, 12 Jun 2020 15:00:00 +0800</pubDate><guid>/activities/sofa-channel-17/</guid><description>概要 活动主题：SOFAChannel#17：网络通信框架 SOFABolt 的功能介绍及协议框架解析 活动时间：7 月 2 日周四晚 7 点 活动形式：线上直播 报名方式：戳</description></item><item><title>Service Mesh Webinar#1：多点生活在 Service Mesh 上的实践</title><link>/activities/service-mesh-webinar-1/</link><pubDate>Wed, 20 May 2020 15:00:00 +0800</pubDate><guid>/activities/service-mesh-webinar-1/</guid><description>概要 活动主题：Service Mesh Webinar#1：多点生活在 Service Mesh 上的实践——Istio + MOSN 在 Dubbo 场景下的探索之路 活动时间：5 月 28 日周四晚 8 点 活</description></item><item><title>SOFAChannel#16：不得不说的云原生隔离性</title><link>/activities/sofa-channel-16/</link><pubDate>Tue, 28 Apr 2020 15:00:00 +0800</pubDate><guid>/activities/sofa-channel-16/</guid><description>概要 活动主题：SOFAChannel#16：不得不说的云原生隔离性 活动时间：5 月 21 日周四晚 7 点 活动形式：线上直播 报名方式：戳这里 介绍 | SOFAChannel &amp;lt;SOFA:Channel/&amp;gt; 有</description></item><item><title>SOFAChannel#15：分布式链路组件 SOFATracer 埋点机制解析</title><link>/activities/sofa-channel-15/</link><pubDate>Fri, 17 Apr 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-15/</guid><description>概要 活动主题：SOFAChannel#15：分布式链路组件 SOFATracer 埋点机制解析 活动时间：4 月 23 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍 |</description></item><item><title>SOFAChannel#14：云原生网络代理 MOSN 的扩展机制解析</title><link>/activities/sofa-channel-14/</link><pubDate>Fri, 27 Mar 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-14/</guid><description>概要 活动主题：SOFAChannel#14：云原生网络代理 MOSN 的扩展机制解析 活动时间：4 月 9 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍</description></item><item><title>SOFAChannel#13：云原生网络代理 MOSN 的多协议机制解析</title><link>/activities/sofa-channel-13/</link><pubDate>Mon, 16 Mar 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-13/</guid><description>概要 活动主题：SOFAChannel#13：云原生网络代理 MOSN 的多协议机制解析 活动时间：3 月 26 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介</description></item><item><title>&lt;SOFA:BootLab/&gt;</title><link>/activities/sofa-boot-lab/</link><pubDate>Tue, 03 Mar 2020 12:00:00 +0800</pubDate><guid>/activities/sofa-boot-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:BootLab/&amp;gt;是《剖析 | SOFABoot 框架》系列，会逐步详细</description></item><item><title>Service Mesh 终端用户调查报告</title><link>/service-mesh-end-user-survey-report/</link><pubDate>Fri, 14 Feb 2020 16:00:00 +0800</pubDate><guid>/service-mesh-end-user-survey-report/</guid><description>2020 年 2 月 4 日到 2 月11 日，ServiceMesher 社区发起了 Service Mesh 终端用户调查，以下为问卷调查结果。 参与问卷调查的人员情况 共收集到 516 份问卷结</description></item><item><title>SOFAChannel#12：蚂蚁金服分布式事务实践解析</title><link>/activities/sofa-channel-12/</link><pubDate>Wed, 12 Feb 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-12/</guid><description>概要 活动主题：SOFAChannel#12：蚂蚁金服分布式事务实践解析 活动时间：3 月 12 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍 | SOFAChannel</description></item><item><title>SOFAChannel#11：从一个例子开始体验轻量级类隔离容器 SOFAArk</title><link>/activities/sofa-channel-11/</link><pubDate>Fri, 17 Jan 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-11/</guid><description>概要 活动主题：SOFAChannel#11：从一个例子开始体验轻量级类隔离容器 SOFAArk 活动时间：2 月 13 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这</description></item><item><title>SOFAChannel#10：分布式事务 Seata 长事务解决方案 Saga 模式详解</title><link>/activities/sofa-channel-10/</link><pubDate>Tue, 31 Dec 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-10/</guid><description>概要 活动主题：SOFAChannel#10：分布式事务 Seata 长事务解决方案 Saga 模式详解 活动时间：1 月 9 日周四晚 7 点 活动形式：线上直播 活动回顾：戳这</description></item><item><title>Service Mesh Meetup#9 杭州站：To Infinity and Beyond</title><link>/activities/service-mesh-meetup-9/</link><pubDate>Wed, 11 Dec 2019 16:00:00 +0800</pubDate><guid>/activities/service-mesh-meetup-9/</guid><description>概要 活动主题：Service Mesh Meetup#9 杭州站：To Infinity and Beyond 活动时间：时间：2019 年 12 月 28 日（周六）13:00-17:30 活动地点：杭州西湖区紫霞路</description></item><item><title>SOFAChannel#9：蚂蚁金服 Service Mesh 双十一落地详解</title><link>/activities/sofa-channel-9/</link><pubDate>Tue, 26 Nov 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-9/</guid><description>概要 活动主题：SOFAChannel#9：蚂蚁金服 Service Mesh 双十一落地详解 活动时间：12 月 5 日周四晚 7 点 活动形式：线上直播 直播回看：戳这里 介绍 | SOFAChannel</description></item><item><title>Kubernetes &amp; Cloud Native X Service Mesh Meetup</title><link>/activities/service-mesh-meetup-8/</link><pubDate>Wed, 13 Nov 2019 18:00:00 +0800</pubDate><guid>/activities/service-mesh-meetup-8/</guid><description>概要 活动主题：Kubernetes &amp;amp; Cloud Native X Service Mesh Meetup 活动时间：2019 年 11 月 24 日（星期日）9:30-16:30 活动地点：北京朝阳大望京科技商务园</description></item><item><title>&lt;SOFA:ArkLab/&gt;</title><link>/activities/sofa-ark-lab/</link><pubDate>Wed, 30 Oct 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-ark-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:ArkLab/&amp;gt;是《剖析 | SOFAArk 源码》系列，会逐步详细介</description></item><item><title>&lt;SOFA:RegistryLab/&gt;</title><link>/activities/sofa-registry-lab/</link><pubDate>Tue, 03 Sep 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-registry-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:RegistryLab/&amp;gt;是《剖析 | SOFARegistry 实现原理》系列</description></item><item><title>SOFAChannel#8：从一个例子开始体验 SOFAJRaft</title><link>/activities/sofa-channel-8/</link><pubDate>Thu, 15 Aug 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-8/</guid><description>概要 活动主题：SOFAChannel#8：从一个例子开始体验 SOFAJRaft 活动时间：8 月 29 日周四晚 7 点 活动形式：线上直播 视频回顾：https://tec</description></item><item><title>SOFA Meetup#3 广州站-从开源技术到产品能力</title><link>/activities/sofa-meetup-3/</link><pubDate>Thu, 25 Jul 2019 15:00:00 +0800</pubDate><guid>/activities/sofa-meetup-3/</guid><description>概要 活动主题：SOFA Meetup#3 广州站-从开源技术到产品能力 活动时间：8 月 11 日周日下午 13 点 活动地点：广州市广电平云 B 塔 15F 活动形式：线下活动 报名方式：</description></item><item><title>SOFAChannel#7：扩展 Kubernetes 实现金融级云原生发布部署 - 自定义资源 CAFEDeployment 的背景、实现和演进</title><link>/activities/sofa-channel-7/</link><pubDate>Mon, 08 Jul 2019 16:10:00 +0800</pubDate><guid>/activities/sofa-channel-7/</guid><description>概要 活动主题：SOFAChannel#7：扩展 Kubernetes 实现金融级云原生发布部署 - 自定义资源 CAFEDeployment 的背景、实现和演进 活动时间：7 月 18 日周四晚 7 点 活动形式</description></item><item><title>SOFAChannel#6：轻量级监控分析系统 SOFALookout 原理讲解和功能演示</title><link>/activities/sofa-channel-6/</link><pubDate>Wed, 12 Jun 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-channel-6/</guid><description>概要 活动主题：SOFAChannel#6：轻量级监控分析系统 SOFALookout 原理讲解和功能演示 活动时间：6 月 12 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直</description></item><item><title>KubeCon 上海同场活动 SOFAStack Cloud Native Workshop</title><link>/activities/sofastack-cloud-native-workshop/</link><pubDate>Tue, 04 Jun 2019 10:20:00 +0000</pubDate><guid>/activities/sofastack-cloud-native-workshop/</guid><description>蚂蚁金服 SOFAStack 云原生工作坊（KubeCon China 2019 同场活动） 日期：2019年6月24日，星期一 时间：9:00 – 16:00 地点：上海世博中心 616 房间 注册费：免费</description></item><item><title>SOFA Meetup#2 上海站——使用 SOFAStack 快速构建微服务</title><link>/activities/sofa-meetup-2/</link><pubDate>Tue, 21 May 2019 11:20:00 +0000</pubDate><guid>/activities/sofa-meetup-2/</guid><description>概要 活动主题：SOFA Meetup#2 上海站-使用 SOFAStack 快速构建微服务 活动时间：5 月 26 日周日下午 13 点 活动地点：上海市徐汇区田林路200号A7栋一楼 活动形式：线</description></item><item><title>SOFAChannel#5：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs</title><link>/activities/sofa-channel-5/</link><pubDate>Wed, 08 May 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-5/</guid><description>概要 活动主题：SOFAChannel#5：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs 活动时间：5 月 16 日周四晚 7 点 活动形式：线上直播 报名方</description></item><item><title>SOFAChannel#4：分布式事务 Seata TCC 模式深度解析</title><link>/activities/sofa-channel-4/</link><pubDate>Tue, 09 Apr 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-4/</guid><description>概要 活动主题：SOFAChannel#4：分布式事务 Seata TCC 模式深度解析 活动时间：4 月 18 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直播回顾文章 介</description></item><item><title>Soul网关发布1.0.4-RELEASE版本</title><link>/blog/soul_1.0.4/soul_1.0.4/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/blog/soul_1.0.4/soul_1.0.4/</guid><description>Soul网关发布1.0.4-RELEASE版本 修复在1.0.3版本的后台管理中，出现的bug。 配置信息序列化方式支持自定义扩展。默认的序列化</description></item><item><title>Hmily发布2.0.2-RELEASE版本</title><link>/blog/hmily_2.0.2/hmily_2.0.2/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>/blog/hmily_2.0.2/hmily_2.0.2/</guid><description>Hmily 发布2.0.2-RELEASE 版本 解决SpringCloud 使用hystrix 配置线程池策略的问题。 新增对springcloud 内嵌事务调</description></item><item><title>SOFA Meetup#1 北京站——服务注册中心、分布式事务重磅发布</title><link>/activities/sofa-meetup-1/</link><pubDate>Mon, 11 Mar 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-meetup-1/</guid><description>概要 活动主题：SOFA Meetup#1 北京站——服务注册中心、分布式事务重磅发布 活动时间：3 月 24 日周日下午 13 点 活动地点：北京中关村创业大街 氪空间 活动形式：</description></item><item><title>SOFAChannel#3：SOFARPC 性能优化（下）—— 手把手带你性能调优（含 Demo）</title><link>/activities/sofa-channel-3/</link><pubDate>Thu, 28 Feb 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-3/</guid><description>概要 活动主题：SOFAChannel#3：SOFARPC 性能优化（下）—— 手把手带你性能调优（含 Demo） 活动时间：2 月 28 日周四晚 7 点 活动形</description></item><item><title>SOFAChannel#2：SOFARPC 性能优化（上）—— 详解优化设计点</title><link>/activities/sofa-channel-2/</link><pubDate>Thu, 21 Feb 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-2/</guid><description>概要 活动主题：SOFAChannel#2：SOFARPC 性能优化（上）—— 详解优化设计点 活动时间：2 月 21 日周四晚 7 点 活动形式：线上直播 直播视</description></item><item><title>SOFAChannel#1——从蚂蚁金服微服务实践谈起</title><link>/activities/sofa-channel-1/</link><pubDate>Thu, 17 Jan 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-1/</guid><description>活动主题：SOFAChannel#1——从蚂蚁金服微服务实践谈起 活动时间：1 月 17 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直播回顾文章 介绍 &amp;</description></item><item><title>Hmily: 轻松搞定高并发分布式事务</title><link>/blog/hmily_current/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_current/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: 高性能异步分布式事务TCC框架</title><link>/blog/hmily_introduction/introduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_introduction/introduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item><item><title>Ark Biz</title><link>/projects/sofa-boot/sofa-ark-ark-biz/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-biz/</guid><description>简介 本小节将介绍 Ark Biz 目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark Biz。 Ark Biz 包和 Ark 包 都是使用 Maven 插件 sofa-ark-maven-plugin 打包生成；工程应用在配置该插件时，默认情</description></item><item><title>Ark Biz 生命周期</title><link>/projects/sofa-boot/sofa-ark-biz-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-biz-lifecycle/</guid><description>SOFAArk 合并部署时，除了宿主应用，其他 Biz 允许运行时动态部署和卸载。Biz 的状态如下： unresolved: 未注册，此时 Biz 包未被运行时解析 resolved: Biz 包解析完成，且已注册，此时</description></item><item><title>Ark Plugin</title><link>/projects/sofa-boot/sofa-ark-ark-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-plugin/</guid><description>本小节将介绍 Ark Plugin 的标准规范和目录结构，以及如何使用官方插件 sofa-ark-plugin-maven-plugin 打包发布 Ark Plugin。 插件规范 标准的 Ark Plugin 需要满足以下规范： 插件必须配置插件名，</description></item><item><title>Ark 事件机制</title><link>/projects/sofa-boot/sofa-ark-ark-event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-event/</guid><description>使用 Ark 事件处理机制 SOFAArk 从 1.1.0 版本开始提供了全新的事件模型，囊括了 SOFAArk 中 biz 和 plugin 的各个生命周期；该版本提供的事件模型参考了 Spring 中的生命周期事件模型。本篇</description></item><item><title>Ark 包</title><link>/projects/sofa-boot/sofa-ark-ark-jar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-jar/</guid><description>本小节将介绍标准 Ark 包 的目录结构，以及如何使用官方插件 sofa-ark-maven-plugin 打包并发布 Ark 包。 Maven 插件 官方提供 Maven 插件 sofa-ark-maven-plugin 可以将普通 Java 工程或者 Spring Boot 工程打包成标准格式 Ark 包 ；</description></item><item><title>Ark 容器启动流程</title><link>/projects/sofa-boot/sofa-ark-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-startup/</guid><description>Ark 应用的整体启动流程如下图所述： 当用 java -jar 启动 Ark 包 或者 在 IDE 中通过 SofaArkBootstrap.launch 启动 Ark 应用时，相应 Launcher 入口会负责启动应用，其中会反射调用 ArkContainer 的入口，初始化 ArkService ，然</description></item><item><title>Ark 容器插件机制</title><link>/projects/sofa-boot/sofa-ark-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-plugin/</guid><description>Ark 插件启动 Ark 中提供了插件启动的接口 com.alipay.sofa.ark.spi.service.PluginActivator ，其定义如下： public interface PluginActivator { /** * Start Plugin * @param context plugin context * @throws ArkException */ void start(PluginContext context) throws ArkException; /** * Stop Plugin * @param context * @throws ArkException */ void stop(PluginContext context) throws ArkException; } 插件只需要实</description></item><item><title>Ark 容器类加载机制</title><link>/projects/sofa-boot/sofa-ark-classloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-classloader/</guid><description>Ark 容器类加载机制 Ark 容器中会管理插件和业务，整体的类加载机制可见如下图描述： Ark 插件类加载机制 每个 Ark 插件都拥有一个独立的类加载器，其类加载的顺序</description></item><item><title>Ark 扩展机制</title><link>/projects/sofa-boot/sofa-ark-ark-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-extension/</guid><description>Ark 容器和 Ark Plugin 在运行时由不同的类加载器加载，不能使用常规的 ServiceLoader 提供 SPI 扩展，SOFAArk 自定义扩展点 SPI 机制， Ark Plugin 实现 SPI 机制，考虑到 Biz 卸载问题，A</description></item><item><title>Ark 日志</title><link>/projects/sofa-boot/sofa-ark-ark-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-log/</guid><description>SOFAArk 容器使用了 logback 日志实现，并集成了 sofa-common-tools，日志相关配置可以参考 配置文档, 这里介绍 SOFAArk 三个日志文件： sofa-ark/common-default.log &amp;gt; sofa-ark 默认日志，打</description></item><item><title>Ark 服务机制</title><link>/projects/sofa-boot/sofa-ark-ark-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-service/</guid><description>SOFAArk 定义了两种服务类型，用于解决应用和插件，应用和应用之间的通信问题，下面分别介绍这两种服务类型： 插件服务 SOFAArk 允许在 Plugin 通过 PluginContext 发布和引用服务，也可</description></item><item><title>Ark 服务通信</title><link>/projects/sofa-boot/sofa-ark-ark-jvm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-jvm/</guid><description>在 Ark 服务机制 中，我们详细介绍了如何引用和发布插件服务，主要是解决 Plugin 和 Biz 的通信问题；为了解决 Biz 之间的通信问题，SOFAArk 引入了 SOFABoot 提供的 SofaService/SofaReference 编</description></item><item><title>Benchmark 数据</title><link>/projects/sofa-jraft/benchmark-performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/benchmark-performance/</guid><description>测试代码 测试环境&amp;amp;条件 3 台 16C 20G 内存的 docker 容器作为 server node (3 副本) 2 ~ 8 台 8C docker 容器 作为 client 24 个 raft 复制组，平均每台 server node 上各自有 8 个 leader 负责读写请求</description></item><item><title>Bolt 协议</title><link>/projects/sofa-rpc/bolt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/bolt/</guid><description>Bolt 协议一个基于 TCP 的自定义的协议，相比 HTTP 来说，性能更好，在蚂蚁金服内部，大量的 RPC 都是采用 Bolt 协议来进行通信： * 基本使用 * 调用方式 * 超时控制 * 泛化</description></item><item><title>Bolt 协议基本使用</title><link>/projects/sofa-rpc/bolt-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/bolt-usage/</guid><description>Bolt 协议基本使用 发布服务 使用 SOFARPC 发布一个 Bolt 协议的服务，只需要增加名称为 Bolt 的 Binding 即可，不同的使用方式添加 Bolt Binding 的方式如下： XML 使用 XML 发布一个 Bolt 协议只需要</description></item><item><title>Bolt 协议泛化调用</title><link>/projects/sofa-rpc/generic-invoke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/generic-invoke/</guid><description>泛化调用提供了让客户端在不需要依赖服务端的接口情况下就能够发起调用的能力。目前 SOFARPC 的泛化调用仅支持在 Bolt 通信协议下使用 Hessian2 作为序列化协议，其他的方</description></item><item><title>Bolt 协议调用方式</title><link>/projects/sofa-rpc/invoke-type/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/invoke-type/</guid><description>调用方式 SOFARPC 在 Bolt 协议下提供了多种调用方式满足不同的场景。 同步 在同步的调用方式下，客户端发起调用后会等待服务端返回结果再进行后续的操作。这是 SOFARPC 的</description></item><item><title>Bolt 协议超时控制</title><link>/projects/sofa-rpc/bolt-timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/bolt-timeout/</guid><description>超时控制 使用 Bolt 协议进行通信的时候，SOFARPC 的超时时间默认为 3 秒，用户可以在引用服务的时候去设置超时时间，又分别可以在服务以及方法的维度</description></item><item><title>Counter 例子详解</title><link>/projects/sofa-jraft/counter-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/counter-example/</guid><description>本文档主要介绍一个基于 jraft 的分布式计数器的例子。 场景 在多个节点（机器）组成的一个 raft group 中保存一个分布式计数器，该计数器可以递增和获取，并且在所有</description></item><item><title>DataSource 埋点接入</title><link>/projects/sofa-tracer/usage-of-datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-datasource/</guid><description>在本文档将演示如何使用 SOFATracer 对 DataSource 进行埋点。 SOFATracer 2.2.0 基于标准的 JDBC 接口实现，支持对标准的数据库连接池（如 DBCP、Druid、c3p0、tomcat、H</description></item><item><title>DataSource 日志</title><link>/projects/sofa-tracer/log-format-datasource/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-datasource/</guid><description>SOFATracer 对标准的 JDBC 数据源进行埋点，输出 SQL 语句执行链路数据，默认日志输出为 JSON 数据格式。 DataSource 摘要日志（datasource-client-digest.</description></item><item><title>Dubbo 协议</title><link>/projects/sofa-rpc/dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/dubbo/</guid><description>SOFARPC 提供了 Dubbo 协议的支持，可以让用户非常方便地和现有的 Dubbo 的系统做对接。 * 基本使用</description></item><item><title>Dubbo 协议基本使用</title><link>/projects/sofa-rpc/dubbo-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/dubbo-usage/</guid><description>在 SOFARPC 中，使用不同的通信协议只要设置使用不同的 Binding 即可，如果需要使用 Dubbo 协议，只要将 Binding 设置为 Dubbo 即可。下面使用以注解的方式来例举，其他的使用方式可以</description></item><item><title>Dubbo 埋点接入</title><link>/projects/sofa-tracer/usage-of-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-dubbo/</guid><description>在本文档将演示如何使用 SOFATracer 对 Dubbo 进行埋点，本示例工程地址。 基础环境 本案例使用的各框架组件的版本如下： SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 2.4.0/3.0.4 JDK 8 本案例包括三个子模块： tracer-sample-with-dubbo-consumer 服务调</description></item><item><title>Dubbo 日志</title><link>/projects/sofa-tracer/log-format-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-dubbo/</guid><description>SOFATracer 集成 Dubbo 后输出请求的链路数据格式，默认为 JSON 数据格式。 Dubbo 服务消费方摘要日志（dubbo-client-digest.log） 以 JSON 格式输出的数据</description></item><item><title>Dubbo快速体验</title><link>/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>FilterChain 配置</title><link>/projects/mosn/configuration/listener/filter-chain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/listener/filter-chain/</guid><description>本文描述的是 MOSN 的 FilterChain 配置。 FilterChain 是 MOSN Listener 配置中核心逻辑配置，不同的 FilterChain 配置描述了 Listener 会如何处理请求。 目前 MOSN 一个 Listener 只支持一个 FilterChain。 FilterChain 的配</description></item><item><title>Grpc快速体验</title><link>/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-grpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc用户指南</title><link>/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-grpc/</guid><description>Grpc用户指南 目前只支持grpc的一元同步调用 引入jar包 引入hmily配置 在具体的实现方法上（服务提供端），加上@HmilyTCC or HmilyTAC 注</description></item><item><title>H2C</title><link>/projects/sofa-rpc/h2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/h2c/</guid><description>SOFARPC 提供了 H2C 协议的支持，可以可以采用 H2C 协议来进行服务的发布和引用 * 基本使用</description></item><item><title>H2C 协议基本使用</title><link>/projects/sofa-rpc/h2c-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/h2c-usage/</guid><description>在 SOFARPC 中，使用不同的通信协议只要设置使用不同的 Binding 即可，如果需要使用 H2C 协议，只要将 Binding 设置为 H2C 即可。下面使用以注解的方式来例举，其他的使用方式可以</description></item><item><title>Hmily 介绍</title><link>/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/overview/</guid><description>Hmily是什么？ Hmily是一款高性能，零侵入，金融级分布式事务解决方案，目前主要提供柔性事务的支持，包含 TCC, TAC(自动生成回滚SQL) 方</description></item><item><title>Hmily-Admin</title><link>/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/admin/</guid><description>Hmily-Admin 启动教程（未完成）: admin 是Hmily中查看事务日志的后台管理系统。 可以查看异常的日志，修改重试次数等功能. 首先确保你的项目使用了Hmily并</description></item><item><title>Hmily-Config</title><link>/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config/</guid><description>配置详解： 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf</description></item><item><title>Hmily-Config-Apollo</title><link>/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-apollo/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Consul</title><link>/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-consul/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Etcd</title><link>/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-etcd/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Local</title><link>/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-local/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Nacos</title><link>/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-nacos/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Zookeeper</title><link>/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-zookeeper/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Context</title><link>/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/context/</guid><description>HmilyTransactionContext事务上下文 @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * 事务</description></item><item><title>Hmily-Metrics</title><link>/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/metrics/</guid><description>Metrics 目前hmily的metrics模块，采用 prometheus来进行采集，使用pull模式对外暴露metrics信息接口。 收集的metric</description></item><item><title>Hmily-TCC</title><link>/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tcc/</guid><description>TCC TCC模式是经典的柔性事务解决方案，需要使用者提供 try, confirm, cancel 三个方法， 真正的情况下会执行 try, confirm, 异常情况下会执行try, cancel。 confirm 方法并不是</description></item><item><title>Hmily-annotation</title><link>/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } 该注解为hmily分布式事务接口标识，表示该接口参与hmily分布式事务 @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the</description></item><item><title>Hmily-code-conduct</title><link>/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/code-conduct/</guid><description>开发理念 用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理</description></item><item><title>Hmily-committer</title><link>/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 hmily仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码重构</description></item><item><title>Hmily-contributor</title><link>/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>Hmily-tac</title><link>/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tac/</guid><description>TAC TAC模式其实是TCC模式的变种,顾名思义 TAC 模式被称为自动回滚,相比于 TCC模式，用户完全不用关心 回滚方法如何去写，减少了用户的开发量，对</description></item><item><title>Http 协议基本使用</title><link>/projects/sofa-rpc/http-json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/http-json/</guid><description>Http 协议基本使用 在 SOFARPC (非SOFABoot 环境)中，当使用Http作为服务端协议的时候，支持Json作为序列化方式，作为一些基础的测试方式使用。</description></item><item><title>HttpClient 埋点接入</title><link>/projects/sofa-tracer/usage-of-httpclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-httpclient/</guid><description>在本文档将演示如何使用 SOFATracer 对 HttpClient 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;!-- SOFATracer 依</description></item><item><title>HttpClient 日志</title><link>/projects/sofa-tracer/log-format-httpclient/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-httpclient/</guid><description>SOFATracer 集成 sofa-tracer-httpclient-plugin 插件后输出 HttpClient 请求的链路数据，默认为 JSON 数据格式。 HttpClient 摘要日志（httpclient-digest.log） 以 JSON 格式输出的数据，相应 key 的含</description></item><item><title>Hystrix 客户端熔断</title><link>/projects/sofa-rpc/fault-hystrix/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/fault-hystrix/</guid><description>SOFARPC 已集成 Hystrix 提供熔断能力，当前提供第一个预览版。关于 Hystrix 的更多介绍可以参考 Hystrix 官方文档，Hystrix 集成能力主要由 ScienJus 提供，感谢贡献。 接下来介绍一</description></item><item><title>JRaft RheaKV 用户指南</title><link>/projects/sofa-jraft/jraft-rheakv-user-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/jraft-rheakv-user-guide/</guid><description>RheaKV 是一个轻量级的分布式的嵌入式的 KV 存储 lib， rheaKV 包含在 jraft 项目中，是 jraft 的一个子模块。 定位与特性 嵌入式: jar 包方式嵌入到应用中 强一致性: 基于 multi-raft 分布</description></item><item><title>JRaft 用户指南</title><link>/projects/sofa-jraft/jraft-user-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/jraft-user-guide/</guid><description>1. 基本概念说明 log index 提交到 raft group 中的任务都将序列化为一条日志存储下来，每条日志一个编号，在整个 raft group 内单调递增并复制到每个 raft 节点。 term 在整个 raft group 中单</description></item><item><title>JVM 服务发布与引用</title><link>/projects/sofa-boot/module-service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/module-service/</guid><description>SOFABoot 提供三种方式给开发人员发布和引用 JVM 服务 XML 方式 Annotation 方式 编程 API 方式 XML 方式 服务发布 首先需要定义一个 Bean： &amp;lt;bean id=&amp;quot;sampleService&amp;quot; class=&amp;quot;com.alipay.sofa.runtime.test.service.SampleServiceImpl&amp;quot;&amp;gt; 然后通过 SOFA 提供的 Spring 扩展标签来将上</description></item><item><title>Java SDK</title><link>/projects/sofa-registry/java-sdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/java-sdk/</guid><description>1. Maven 坐标 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2. 创建 SOFARegistry 客户端实例 构建 SOFARegistry 客户端实例的关键代码如下： RegistryClientConfig config = DefaultRegistryClientConfigBuilder.start().setRegistryEndpoint(&amp;quot;127.0.0.1&amp;quot;).setRegistryEndpointPort(9603).build(); DefaultRegistryClient registryClient = new DefaultRegistryClient(config); registryClient.init(); 其中注册中心相关的属性通过 DefaultRegistryClientConfigBuilder 构建指定，该类包含以下关</description></item><item><title>Jepsen 验证</title><link>/projects/sofa-jraft/jepson-test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/jepson-test/</guid><description>除了几百个单元测试以及部分 chaos 测试之外, SOFAJRaft 还使用 jepsen 这个分布式验证和故障注入测试框架模拟了很多种情况，都已验证通过： 随机分区，一大一小两个网络分</description></item><item><title>Listener 配置</title><link>/projects/mosn/configuration/listener/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/listener/overview/</guid><description>本文描述的是 MOSN listener 配置。 Listener 配置详细描述了 MOSN 启动时监听的端口，以及对应的端口对应不同逻辑的配置。 Listener 的配置可以通过Listener动态接口进行添加</description></item><item><title>MOSN 0.1.0 性能报告</title><link>/projects/mosn/reference-performance-report010/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/reference-performance-report010/</guid><description>以下的的性能报告为 MOSN 0.1.0 在做 Bolt 与 HTTP1.x 协议的纯 TCP 转发上与 envoy 的一些性能对比数据，主要表现在 QPS、RTT、失败率/成功率等。 这里需要强调的是，为了提</description></item><item><title>MOSN 0.2.1 性能报告</title><link>/projects/mosn/reference-performance-report021/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/reference-performance-report021/</guid><description>以下性能报告的基准版本为 MOSN 0.2.1。在 0.2.1 版本中，我们进行了如下一些优化手段： - 添加内存复用框架，涵盖 io/protocol/stream/proxy 层级，减少对象分配、内存使用和 GC 压力</description></item><item><title>MOSN 介绍</title><link>/projects/mosn/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/overview/</guid><description>MOSN 的官方网站 mosn.io 正在建设中，文档临时托管在这里。 MOSN 是一款使用 Go 语言开发的网络代理软件，作为云原生的网络数据平面，旨在为服务提供多协议，模块化，</description></item><item><title>MOSN 平滑升级原理解析</title><link>/projects/mosn/concept/smooth-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/smooth-upgrade/</guid><description>Service Mesh 中 Sidecar 运维一直是一个比较棘手的问题，数据平面的 Sidecar 升级是常有的事情，如何在升级 Sidecar（MOSN）的时候而不影响业务，对于存量的长连接</description></item><item><title>Maven 依赖说明</title><link>/projects/sofa-jraft/maven-dependency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/maven-dependency/</guid><description>pom依赖 &amp;lt;!-- jraft --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jraft-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- jsr305 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- bolt --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.5.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hessian&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- log --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.7.21&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- disruptor --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.lmax&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;disruptor&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.3.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;commons-lang&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;commons-lang&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protobuf --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.protobuf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;protobuf-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- protostuff</description></item><item><title>Motan快速体验</title><link>/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-motan/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Motan用户指南</title><link>/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-motan/</guid><description>Motan接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Motan</description></item><item><title>Myth 介绍</title><link>/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/overview/</guid><description>myth 采用消息队列解决分布式事务的开源框架, 基于java语言来开发（JDK1.8），支持dubbo，springcloud,motan等rpc框</description></item><item><title>Nginx vs Envoy vs MOSN 平滑升级原理解析</title><link>/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/nginx-envoy-mosn-hot-upgrade/</guid><description>前言 本文是对 Nginx、Envoy 及 MOSN 的平滑升级原理区别的分析，适合对 Nginx 实现原理比较感兴趣的同学阅读，需要具备一定的网络编程知识。 平滑升级的</description></item><item><title>Node跨语言调用</title><link>/projects/sofa-rpc/node-and-java-communicate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/node-and-java-communicate/</guid><description>快速上手 如果你有通过 NodeJs 调用 SOFARPC 的需求.可以按照如下的文档来开始. 安装 首先按照文档安装 https://github.com/sofastack/sofa-rpc-node 使用命令. $ npm install sofa-rpc-node --save 代码示例 暴露一个 RPC 服务，并发布到注册</description></item><item><title>OkHttp 埋点接入</title><link>/projects/sofa-tracer/usage-of-okhttp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-okhttp/</guid><description>在本文档将演示如何使用 SOFATracer 对 OkHttp 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;!-- SOFATracer 依</description></item><item><title>OkHttp 日志</title><link>/projects/sofa-tracer/log-format-okhttp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-okhttp/</guid><description>SOFATracer 集成 OkHttp 后输出请求的链路数据格式，默认为 JSON 数据格式。 OkHttp 摘要日志（okhttp-digest.log） 以 JSON 格式输出的数据，相应 key 的含义解释如下</description></item><item><title>OpenFeign 埋点接入</title><link>/projects/sofa-tracer/usage-of-openfeign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-openfeign/</guid><description>在本文档将演示如何使用 SOFATracer 对 Spring Cloud OpenFeign 进行埋点。 基础环境 本案例使用的各框架组件的版本如下： Spring Cloud Greenwich.RELEASE SOFABoot 3.1.1/SpringBoot 2.1.0.RELEASE SOFATracer 3.0.4 JDK 8 本案例包括两个子工程： tracer-sample-with-openfeign-provider 服务提供方 tracer-sample-with-openfeign-consumer</description></item><item><title>OpenFeign 日志</title><link>/projects/sofa-tracer/log-format-openfeign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-openfeign/</guid><description>SOFATracer 集成 Spring Cloud OpenFeign 后输出请求的链路数据格式，默认为 JSON 数据格式。 Spring Cloud OpenFeign 摘要日志（feign-digest.log） 以 JSON 格式输出的数据，相应 key 的含义解</description></item><item><title>Pilot 介绍</title><link>/projects/sofa-mesh/pilot-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-readme/</guid><description>SOFA Mesh 项目 fork 了 Istio 项目，对 Pilot 的能力进行增强，目前在进行中的增强主要集中在下面三个方面： - 支持 Zookeeper 作为注册中心，并在此基础上支持 SOFA、DUBBO</description></item><item><title>REST Exception</title><link>/projects/sofa-rpc/restful-exception/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful-exception/</guid><description>对于 REST，我们设计了一个 JAXRSProviderManager 管理器类。在服务端生效，生效时间为服务启动时。如果希望有一个通用的 异常处理类，用来处理REST的某中异常类型的</description></item><item><title>REST 自定义 Filter</title><link>/projects/sofa-rpc/restful-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful-filter/</guid><description>对于 REST，我们设计了一个 JAXRSProviderManager 管理器类。在服务端生效，生效时间为服务启动时。 com.alipay.sofa.rpc.server.rest.RestServer#registerProvider 对于用户自定义的 Filter 类，可以在初始化完成后，调用 com.alipay.sofa.rpc.config.JAXRSProviderManager#registerCustomProviderInstance 进行注册，其中</description></item><item><title>REST 跨域</title><link>/projects/sofa-rpc/restful-cors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful-cors/</guid><description>对于 REST，我们内置了一个跨域 Filter 的支持。 SOFARPC API 使用 对于使用 SOFARPC API 的用户，可以在 ServerConfig 中添加一个参数表明即可 Map&amp;lt;String,String&amp;gt; parameters=new HashMap&amp;lt;String, String&amp;gt;() parameters.put(RpcConstants.ALLOWED_ORIGINS,&amp;quot;abc.com,cdf.com&amp;quot;); serverConfig.setParameters(parameters); XML 方式使用 直接通过配置 com.alipay.sofa.rpc.rest.allowed.origins=a.com,b.com 即可</description></item><item><title>RESTful 协议</title><link>/projects/sofa-rpc/restful/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful/</guid><description>SOFARPC 提供了 RESTful 协议的支持，可以让用户非常方便地将一个接口通过 RESTful 的方式发布出去。 * 基本使用 * 自定义 Filter * 通用异常处理 * 集成 Swagger</description></item><item><title>RESTful 协议基本使用</title><link>/projects/sofa-rpc/restful-basic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful-basic/</guid><description>在 SOFARPC 中，使用不同的通信协议即使用不同的 Binding 即可，如果需要使用 RESTful 协议，只要将 Binding 设置为 REST 即可。 发布服务 在定义 RESTful 的服务接口的时候，需要采用 JAXRS 标准的注</description></item><item><title>RPC 发布订阅配置</title><link>/projects/sofa-rpc/configuration-common/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/configuration-common/</guid><description>ProviderConfig 属性 名称 默认值 备注 id ID 自动生成 application 应用对象 空ApplicationConfig interfaceId 服务接口（唯一标识元素） 不管是普通调用和返回调用，这里都设置</description></item><item><title>RPC 应用参数配置</title><link>/projects/sofa-rpc/application-rpc-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/application-rpc-config/</guid><description>在 SOFABoot 的使用场景下，RPC 框架在应用层面，提供一些配置参数，支持的应用级别的参数配置，如端口，线程池等信息，都是通过 Spring Boot的@Config</description></item><item><title>Raft 算法解读</title><link>/projects/sofa-jraft/raft-introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/raft-introduction/</guid><description>Raft 新特性 Strong Leader 更强的领导形式 例如日志条目只会从领导者发送到其他服务器, 这很大程度上简化了对日志复制的管理 Leader Election 使用随机定时器来选举领导者 用最简单</description></item><item><title>Raincat 介绍</title><link>/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/overview/</guid><description>Raincat 强一致性分布式事务，是基于二阶段提交+本地事务补偿机制来实现。原理介绍 基于java语言来开发（JDK1.8），支持dubbo,motan,</description></item><item><title>Register Agent</title><link>/projects/sofa-mesh/pilot-register-agent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-register-agent/</guid><description>TBD</description></item><item><title>RestTemplate 埋点接入</title><link>/projects/sofa-tracer/usage-of-resttemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-resttemplate/</guid><description>在本文档将演示如何使用 SOFATracer 对 RestTemplate 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt;</description></item><item><title>RestTemplate 日志</title><link>/projects/sofa-tracer/log-format-resttemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-resttemplate/</guid><description>SOFATracer 集成 RestTemplate 后输出请求的链路数据格式，默认为 JSON 数据格式。 RestTemplate 摘要日志（resttemplate-digest.log） 以 JSON 格式输出的数据，相应 key 的</description></item><item><title>Road Map</title><link>/projects/sofa-jraft/road-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/road-map/</guid><description>SOFAJRaft 2019 年 4-7 月开发计划 (p1) Telnet 服务（或其他，越简单越好），作为一种在线排查问题的手段，主要提供以下几个功能 Raft_stat: 以 node 节点为 root，能列出大部分甚至所有</description></item><item><title>SOFAActs 介绍</title><link>/projects/sofa-acts/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/overview/</guid><description>ACTS（AntCoreTest）源于蚂蚁金服多年金融级分布式架构工程的测试实践的积累与沉淀，是一款白盒测试框架，旨在为企业提供高效、精细化</description></item><item><title>SOFAArk 介绍</title><link>/projects/sofa-boot/sofa-ark-readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-readme/</guid><description>SOFAArk 是一款基于 Java 实现的轻量级类隔离容器，主要提供类隔离和应用(模块)合并部署能力，由蚂蚁金服公司开源贡献； 在大型软件开发过程中，通常会推荐底层</description></item><item><title>SOFAArk 管控</title><link>/projects/sofa-dashboard/ark-console/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/ark-console/</guid><description>SOFAArk 本身提供了多种方式来支持多应用(模块)合并部署 ，包括基于命令行的管控，基于 API 的管控等；SOFAARK 管控是 SOFADashboard 针对 API 的管控的一种实现。通过面</description></item><item><title>SOFAArk 配置</title><link>/projects/sofa-boot/sofa-ark-ark-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-config/</guid><description>SOFAArk 的配置目录不是必须存在，如果需要，统一放在工程根目录 ${baseDir}/conf/ark 下，执行 sofa-ark-maven-plugin 打包，将会自动将该目录下的配置打包至 Ark 包，例如 Ark 包目录为： . ├── META-INF │ └─</description></item><item><title>SOFABolt 功能介绍</title><link>/projects/sofa-bolt/sofa-bolt-functions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/sofa-bolt-functions/</guid><description>功能架构 SOFABolt 的基础功能： 基础通信功能 ( remoting-core ) 基于 Netty 高效的网络 IO 与线程模型运用 连接管理 (无锁建连，定时断链，自动重连) 基础通信模型 ( oneway，</description></item><item><title>SOFABolt 参与贡献</title><link>/projects/sofa-bolt/sofa-bolt-contribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/sofa-bolt-contribution/</guid><description>参与贡献 开放代码允许在签署协议之后,提交贡献代码. 版权协议 对 SOFABolt 代码的修改和变更，需要遵守版权协议。 准备工作 贡献代码前需要先了解git工具的使</description></item><item><title>SOFABolt 发展路线</title><link>/projects/sofa-bolt/sofa-bolt-roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/sofa-bolt-roadmap/</guid><description>发展路线 Version 1.5.1 修复项目中代码风格的问题：https://github.com/alipay/sofa-bolt/issues/85 修复项目中已</description></item><item><title>SOFABolt 概述</title><link>/projects/sofa-bolt/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/overview/</guid><description>介绍 SOFABolt 是蚂蚁金融服务集团开发的一套基于 Netty 实现的网络通信框架。 为了让 Java 程序员能将更多的精力放在基于网络通信的业务逻辑实现上，而不是过多的纠结于</description></item><item><title>SOFABolt 用户手册</title><link>/projects/sofa-bolt/sofa-bolt-handbook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/sofa-bolt-handbook/</guid><description>用户指南 maven coordinator &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;bolt&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; check release note for version 1. 基础功能 1.1 实现用户请求处理器 (UserProcessor) 我们提供了两种用户请求处理器，SyncUserProcessor 与 Async</description></item><item><title>SOFABolt 相关链接</title><link>/projects/sofa-bolt/related-links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-bolt/related-links/</guid><description>相关链接 ISSUES 用户手册 中文介绍文章: 蚂蚁通信框架实践</description></item><item><title>SOFABoot 2.5.x 升级注意事项</title><link>/projects/sofa-boot/upgrade_2_5_x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/upgrade_2_5_x/</guid><description>SOFABoot 2.3.x/2.4.x 升级到 2.5.x SOFABoot 2.3.x/2.4.x 基于 Spring Boot 1.4.2.RELEASE 版本开发，SOFABoot 2.5.x 则是基于 Spring Boot 1.5.x 版本开发。 从 SOFABoot 2.3.x/2.4.x 升级到 SOFABoot 2.5.x 需要重点考虑 Spring Boot 1.5.x 相较 Spring Boot 1.4.x 的升级注意点。 重命</description></item><item><title>SOFABoot 3.0 升级注意事项</title><link>/projects/sofa-boot/upgrade_3_x/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/upgrade_3_x/</guid><description>前言 SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFA</description></item><item><title>SOFABoot Profile</title><link>/projects/sofa-boot/sofaboot-profile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofaboot-profile/</guid><description>Spring 框架从 3.1.X 版本开始提供了 profile 功能: Bean Definition Profiles，SOFABoot 支持模块级 profile 能力，即在各个模块启动的时候决定模块是否能够启动。 使用 Module-Profile 激</description></item><item><title>SOFABoot 介绍</title><link>/projects/sofa-boot/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/overview/</guid><description>SOFABoot 是蚂蚁金服开源的基于 Spring Boot 的研发框架，它在 Spring Boot 的基础上，提供了诸如 Readiness Check，类隔离，日志空间隔离等能力。在增强了 Spring Boot 的同时，SOFABo</description></item><item><title>SOFABoot 使用类隔离</title><link>/projects/sofa-boot/classloader-isolation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/classloader-isolation/</guid><description>SOFABoot 提供了类隔离框架 SOFAArk, 弥补了 Spring Boot 在类隔离能力上的缺失，用以解决在实际开发中常见的类冲突、包冲突问题，详细请参考 SOFAArk。 在 SOFABoot 工程中使用类</description></item><item><title>SOFABoot 动态模块实践</title><link>/guides/kc-sofastack-dynamic-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-sofastack-dynamic-demo/</guid><description/></item><item><title>SOFABoot 拓展点</title><link>/projects/sofa-boot/extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/extension/</guid><description>SOFABoot 支持模块化隔离，在实际的使用场景中，一个模块中的 bean 有时候需要开放一些入口，供另外一个模块扩展。SOFABoot 借鉴和使用了 Nuxeo Runtime 项目 以及 nuxeo 项</description></item><item><title>SOFABoot 方式快速入门</title><link>/projects/sofa-rpc/getting-started-with-sofa-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/getting-started-with-sofa-boot/</guid><description>本文档将演示了如何在 SOFABoot 环境下应用 SOFARPC 进行服务的发布和引用。 您可以直接在工程下找到本文档的示例代码。注意,示例代码中需要本地安装 zookeeper 环境,如果没有</description></item><item><title>SOFABoot 环境 XML 配置使用</title><link>/projects/sofa-rpc/programing-sofa-boot-xml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/programing-sofa-boot-xml/</guid><description>在xml方式中发布和引用服务的方式如下。 sofa:service 元素表示发布服务， sofa:reference 元素表示引用服务。 sofa:binding 表示服务发布或引用的协议。 &amp;lt;bean id=&amp;quot;personServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;personServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.boot.examples.demo.rpc.bean.PersonService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt/&amp;gt; &amp;lt;/sofa:service&amp;gt; 一个服务也可以通</description></item><item><title>SOFABoot 环境动态 API 使用</title><link>/projects/sofa-rpc/programing-sofa-boot-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/programing-sofa-boot-api/</guid><description>SOFABoot 为 RPC 服务的发布和引用提供了一套编程 API 方式，方便直接在代码中发布和引用 RPC 服务，与 Spring 的 ApplicationContextAware 类似，为使用编程 API 方式，首先需要实现 ClientFactoryAware 接口获取编程组件</description></item><item><title>SOFABoot 环境发布订阅说明</title><link>/projects/sofa-rpc/rpc-config-xml-explain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/rpc-config-xml-explain/</guid><description>这部分介绍在 SOFABoot 环境下,完整的 SOFARPC 服务发布与引用说明 发布服务 &amp;lt;bean id=&amp;quot;helloSyncServiceImpl&amp;quot; class=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncServiceImpl&amp;quot;/&amp;gt; &amp;lt;sofa:service ref=&amp;quot;helloSyncServiceImpl&amp;quot; interface=&amp;quot;com.alipay.sofa.rpc.samples.invoke.HelloSyncService&amp;quot; unique-id=&amp;quot;&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:global-attrs registry=&amp;quot;&amp;quot; serialize-type=&amp;quot;&amp;quot; filter=&amp;quot;&amp;quot; timeout=&amp;quot;3000&amp;quot; thread-pool-ref=&amp;quot;&amp;quot; warm-up-time=&amp;quot;60000&amp;quot; warm-up-weight=&amp;quot;10&amp;quot; weight=&amp;quot;100&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;sofa:binding.rest&amp;gt; &amp;lt;/sofa:binding.rest&amp;gt; &amp;lt;/sofa:service&amp;gt; 属性 名称 默认值 备注 id ID bean名 class 类 无 ref 服</description></item><item><title>SOFABoot 环境注解使用</title><link>/projects/sofa-rpc/programing-sofa-boot-annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/programing-sofa-boot-annotation/</guid><description>注解服务发布与服务引用 除了常规的 xml 方式发布服务外,我们也支持在SOFABoot 环境下,注解方式的发布与引用,同 xml 类似,我们有 @SofaService 和 @SofaR</description></item><item><title>SOFADashboard 介绍</title><link>/projects/sofa-dashboard/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/overview/</guid><description>SOFADashboard 致力于对 SOFA 框架中组件进行统一管理，包括服务治理、SOFAArk 管控等。SOFADashboard 本身所用技术栈均基于开源社区产品来开发构建</description></item><item><title>SOFAJRaft 介绍</title><link>/projects/sofa-jraft/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/overview/</guid><description>本介绍内容来自 braft 文档，原文链接请参见这里。braft 的关于算法和应用本身的文档非常优秀，由于 jraft 脱胎自 braft，我们强烈推荐阅读上述文档以了</description></item><item><title>SOFALookout 介绍</title><link>/projects/sofa-lookout/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/overview/</guid><description>SOFALookout 是蚂蚁金服开源的一款解决系统的度量和监控问题的轻量级中间件服务。它提供的服务包括：Metrics 的埋点、收集、加工、存储与查询等。该开源项</description></item><item><title>SOFALookout 服务端快速开始</title><link>/projects/sofa-lookout/quick-start-metrics-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/quick-start-metrics-server/</guid><description>1.使用本机 ES 服务 1)本地启动 ES docker run -d --name es -p 9200:9200 -p 9300:9300 -e &amp;quot;discovery.type=single-node&amp;quot; elasticsearch:5.6 版本：V5，V6 2)检查 ES 是否健康 http://localhost:9200/_cat/health?v 3)启动 Lookout 服务 执行 all-in-one-bootstrap 编译后的 fat-jar 包，如何获得，见文</description></item><item><title>SOFAMesh 介绍</title><link>/projects/sofa-mesh/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/overview/</guid><description>该项目仓库已弃用。该项目将直接向 Istio 贡献，不会继续在 fork 的仓库中开发，请转至 Istio 官网。 SOFAMesh 是基于 Istio 改进和扩展而来的 Service Mesh 大规模落地实践方案。在继承 Istio 强</description></item><item><title>SOFARPC Metrics 指标</title><link>/projects/sofa-lookout/sofarpc-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/sofarpc-metrics/</guid><description>SOFARPC 目前度量了两个指标。 服务端线程池 metric name metric tags specification rpc.bolt.threadpool.config bolt 线程池配置 主要包括 rpc 服务端的线程池配置信息 rpc.bolt.threadpool.active.count 当前线程池的运行线程 rpc.bolt.threadpool.idle.count 当前线程池的空闲线程 rpc.bolt.threadpool.queue.size 当前</description></item><item><title>SOFARPC 介绍</title><link>/projects/sofa-rpc/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/overview/</guid><description>项目简介 SOFARPC 是蚂蚁金服开源的一款基于 Java 实现的 RPC 服务框架，为应用之间提供远程服务调用能力，具有高可伸缩性，高容错性，目前蚂蚁金服所有的业务的相互</description></item><item><title>SOFARPC 工程架构介绍</title><link>/projects/sofa-rpc/structure-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/structure-intro/</guid><description>架构图 SOFARPC 从下到上分为两层： 核心层：包含了我们的 RPC 的核心组件（例如我们的各种接口、API、公共包）以及一些通用的实现（例如随机等负载均衡算法）</description></item><item><title>SOFARPC 方式快速入门</title><link>/projects/sofa-rpc/getting-started-with-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/getting-started-with-rpc/</guid><description>本文档将演示了如何应用 SOFARPC 进行服务的发布和引用。 本例将在本地模拟服务端启动监听一个端口并发布一个服务，客户端引用该服务进行直连调用。 您可以直接</description></item><item><title>SOFARPC 日志</title><link>/projects/sofa-tracer/log-format-sofarpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-sofarpc/</guid><description>SOFATracer 集成在 SOFARPC(5.4.0及之后的版本) 后输出链路数据的格式，默认为 JSON 数据格式，具体的字段含义解释如下： RPC 客户端 摘要日志（ rpc-c</description></item><item><title>SOFARegistry 介绍</title><link>/projects/sofa-registry/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/overview/</guid><description>项目简介 SOFARegistry 是蚂蚁金服开源的一个生产级、高时效、高可用的服务注册中心。SOFARegistry 最早源自于淘宝的 ConfigServer，十年来</description></item><item><title>SOFAStack Demos</title><link>/guides/sofastack-demos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/sofastack-demos/</guid><description/></item><item><title>SOFATracer 介绍</title><link>/projects/sofa-tracer/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/overview/</guid><description>SOFATracer 是蚂蚁金服开发的基于 OpenTracing 规范 的分布式链路跟踪系统，其核心理念就是通过一个全局的 TraceId 将分布在各个服务节点上的同一次请求串联起来。通过统一的 TraceId 将调</description></item><item><title>SOFATracer 工具类</title><link>/projects/sofa-tracer/utils/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/utils/</guid><description>通过 SOFATracer 上下文获取 Span 在一次分布式链路调用过程中，在集成了 SOFATracer 的组件会产生一个 Span 并会缓存到 SOFATracer 的上下文中，这个上下文是缓存在 ThreadLocal 中的，作为使用者可以通</description></item><item><title>SOFATracer 配置项</title><link>/projects/sofa-tracer/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/configuration/</guid><description>应用在引入 SOFATracer 后，可以在 Spring Boot 的配置文件 application.properties 中添加相关配置项来定制 SOFATracer 的相关行为。 SOFATracer 的日志输出目录，可以在 application.properties 中配置 logging.path 的路径，那么其日志输出路径为 ${</description></item><item><title>SOFATracer 链路追踪</title><link>/projects/sofa-rpc/sofatracer-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/sofatracer-usage/</guid><description>在SOFARPC(5.4.0及之后的版本) 后的版本中，我们集成了SOFATracer的功能，默认开启，可以输出链路中的数据信息。 默认为 JSON 数据</description></item><item><title>Server 配置说明</title><link>/projects/mosn/configuration/server/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/server/overview/</guid><description>本文是关于 MOSN server 配置的说明。 虽然 MOSN 的配置结构里 servers 是一个 server 数组，但是目前最多只支持配置一个server。 server 描述的 MOSN 的基本的全局参数如下所示。 { &amp;quot;default_log_path&amp;quot;:&amp;quot;&amp;quot;,</description></item><item><title>Sidecar 模式</title><link>/projects/mosn/concept/sidecar-pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/sidecar-pattern/</guid><description>Sidecar 模式是 Service Mesh 中习惯采用的模式，是容器设计模式的一种，在 Service Mesh 出现之前该模式就一直存在，本文将为您讲解 Sidecar 模式。 什么是 Sidecar 模式 将应用程序的功能划分为</description></item><item><title>Skywalking 链路分析</title><link>/projects/sofa-rpc/skywalking-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/skywalking-usage/</guid><description>SOFARPC 在5.4.0 及之后的版本中，已经支持 Skywalking 的链路分析的功能，用户可以根据需要进行使用，其中Skywalking 的版本 要求6.0.0-alpha</description></item><item><title>Soul 介绍</title><link>/projects/soul/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/overview/</guid><description>What is the Soul？ 这是一个异步的，高性能的，跨语言的，响应式的API网关。我希望能够有一样东西像灵魂一样，保护您的微服务。参考了Kong，Sp</description></item><item><title>Spring Bean 异步初始化</title><link>/projects/sofa-boot/bean-async-init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/bean-async-init/</guid><description>SOFABoot 提供了模块并行启动以及 Spring Bean 异步初始化能力，用于加快应用启动速度。本文介绍如何使用 SOFABoot 异步初始化 Spring Bean 能力以提高应用启动速度。 使用场景 在实际使用</description></item><item><title>Spring MVC 埋点接入</title><link>/projects/sofa-tracer/usage-of-mvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/usage-of-mvc/</guid><description>在本文档将演示如何使用 SOFATracer 对 SpringMVC 进行埋点，本示例工程地址。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 依赖引入 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;tracer-sofa-boot-starter&amp;lt;/artifactId&amp;gt;</description></item><item><title>Spring MVC 日志</title><link>/projects/sofa-tracer/log-format-springmvc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/log-format-springmvc/</guid><description>SOFATracer 集成 SpringMVC 后输出 MVC 请求的链路数据格式，默认为 JSON 数据格式。 Spring MVC 摘要日志（spring-mvc-digest.log） 以 JSON 格式输出的数据，相应 key 的</description></item><item><title>SpringCloud快速体验</title><link>/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-demo</description></item><item><title>SpringCloud用户指南</title><link>/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-springcloud/</guid><description>Spring-Cloud 用户指南 步骤一: 引入依赖jar包 步骤二：引入hmily配置 步骤三：在具体的实现方法上（服务提供端），加上HmilyTCC or HmilyTAC 注解 步骤四：在</description></item><item><title>TLS 安全链路</title><link>/projects/mosn/concept/tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/tls/</guid><description>本文将向您展示 MOSN 的 TLS 安全能力。 证书方案 MOSN 支持通过 Istio Citadel 的证书签发方案，基于 Istio 社区的 SDS （Secret Discovery Service）方案为 Sidecar 配置证书，支持证书</description></item><item><title>Telnet 指令</title><link>/projects/sofa-boot/sofa-ark-ark-telnet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-telnet/</guid><description>SOFAArk 容器提供了一个简单的 telnet 服务端小工具，用于运行时查看容器状态，目前支持查看 Plugin 和 Biz 相关信息。 使用方式 使用 telnet 连接服务端，端口号为 1234， 例如：</description></item><item><title>TraceId 和 SpanId 生成规则</title><link>/projects/sofa-tracer/traceid-generated-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/traceid-generated-rule/</guid><description>TraceId 生成规则 SOFATracer 通过 TraceId 来将一个请求在各个服务器上的调用日志串联起来，TraceId 一般由接收请求经过的第一个服务器产生，产生规则是： 服务器 IP + 产</description></item><item><title>X-Protocol</title><link>/projects/sofa-mesh/pilot-x-protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-x-protocol/</guid><description>X-Protocol 协议是 SOFAMesh 支持的特殊通用协议，能够以统一的方式接入不同的 RPC 协议，因为无需进行协议解析，不仅能够提供更高的性能, 更能降低接入新协议的开发成本。</description></item><item><title>Zookeeper Adpater</title><link>/projects/sofa-mesh/pilot-zookeeper-adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-zookeeper-adapter/</guid><description>Zookeeper Adapter 是按照 Istio 注册中心扩展机制开发的一个 Adapter 插件，用于对接所有使用 Zookeeper 作为注册中心的微服务框架。目前已经支持了 SOFARPC，很快将提供对于 Dubbo 的支</description></item><item><title>Zookeeper 配置</title><link>/projects/sofa-boot/sofa-ark-zk-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-zk-config/</guid><description>在介绍 Biz 生命周期 时，我们提到了有三种方式控制 Biz 的生命周期，并且介绍了使用客户端 API 实现 Biz 的安装、卸载、激活。在这一章节我们介绍如何使用 SOFAArk 提供的</description></item><item><title>connection_manager</title><link>/projects/mosn/configuration/listener/network-filter/connection-manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/listener/network-filter/connection-manager/</guid><description>connection_manager 用于描述 MOSN 的路由配置，通常与 proxy 配合使用。 { &amp;quot;router_config_name&amp;quot;:&amp;quot;&amp;quot;, &amp;quot;virtual_hosts&amp;quot;: [ ] } router_config_name，唯一的路由配置标识，与 proxy 中配置的字段对应。 vir</description></item><item><title>dubbo用户指南</title><link>/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-dubbo/</guid><description>Dubbo接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Dubbo</description></item><item><title>proxy</title><link>/projects/mosn/configuration/listener/network-filter/proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/listener/network-filter/proxy/</guid><description>proxy 是 MOSN 最常用的 network filter，其配置格式如下。 { &amp;quot;downstream_protocol&amp;quot;:&amp;quot;&amp;quot;, &amp;quot;upstream_protocol&amp;quot;:&amp;quot;&amp;quot;, &amp;quot;router_config_name&amp;quot;:&amp;quot;&amp;quot;, &amp;quot;extend_config&amp;quot;:{} } downstream_protocol 描述 proxy 期望收到的请求协议，在连接收到数据时，会使用此协议去解析数据包并完成转发，</description></item><item><title>sofa-rpc快速体验</title><link>/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-rpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>sofa-rpc用户指南</title><link>/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-rpc/</guid><description>sofa-rpc接口项目 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } so</description></item><item><title>tars快速体验</title><link>/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-tars/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 建立tars节点 根据此文在当前tars平台建立</description></item><item><title>tars用户指南</title><link>/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-tars/</guid><description>Tars用户指南 引入jar包 引入hmily配置 在需要进行Hmily分布式事务的自动生成的Servant接口方法上加上 @Hmily 标识。 在具体的实现方法</description></item><item><title>一站式编辑</title><link>/projects/sofa-acts/usage-ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/usage-ide/</guid><description>打开 ACTS IDE 在 Package 视图下，右键含 @Test 注解的函数名，ACTS 功能 -&amp;gt; 修改测试用例，如下图： 编写测试数据 准备入参 根据被测的接口方法的入参（类型、顺序、数量</description></item><item><title>一键模型化</title><link>/projects/sofa-acts/usage-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/usage-model/</guid><description>快速理解 ACTS 的模型 在写测试用例的过程中，需要预先准备一些 DB 表、方法入参的数据，或者需要校验一些 DB 表、返回结果的数据，这些数据可以以模版的形式保</description></item><item><title>一键脚本化</title><link>/projects/sofa-acts/usage-script/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/usage-script/</guid><description>快速理解 ACTS 中的脚本 如果你是一个经常编写测试用例的同学，是不是经常苦于这样的问题： * 不断的 assertEquals 写得快吐了，重复性编码毫无创意； * 少一个 assert 容易假绿</description></item><item><title>上报数据至 Zipkin</title><link>/projects/sofa-tracer/report-to-zipkin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/report-to-zipkin/</guid><description>在本文档将演示如何使用 SOFATracer 集成 Zipkin 进行数据上报展示。 假设你已经基于 SOFABoot 构建了一个简单的 Spring Web 工程，那么可以通过如下步骤进行操作： 下面的示例中将分别演</description></item><item><title>优雅关闭</title><link>/projects/sofa-rpc/graceful-shutdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/graceful-shutdown/</guid><description>优雅关闭，包括两部分，一个是 RPC 框架作为客户端，一个是 RPC 框架作为服务端。 作为服务端 作为服务端的时候，RPC 框架在关闭时，不应该直接暴力关闭。在</description></item><item><title>使用 CloudMesh 轻松实践 Service Mesh</title><link>/guides/kc-cloud-mesh-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-cloud-mesh-demo/</guid><description/></item><item><title>使用 Consul 作为注册中心</title><link>/projects/sofa-rpc/registry-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-consul/</guid><description>使用 Consul 作为服务注册中心需要添加如下依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.ecwid.consul&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;consul-api&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.4.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 然后在 application.properties 中如下配置： com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500 其中后面的值为 consul 的连接地址，如果需要设置一些其他参数，也可以通过 com.alipay.sofa.rpc.registry.address=consul://127.0.0.1:8500?a=1&amp;amp;b=2 进行</description></item><item><title>使用 MOSN 搭建 Service Mesh 平台</title><link>/projects/mosn/quick-start-run-with-sofamesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/quick-start-run-with-sofamesh/</guid><description>本文将介绍如何使用 MOSN 在 SOFAMesh 框架下搭建 Service Mesh 的开发环境，并验证 MOSN 的一些基础路由能力、负载均衡能力等。本文介绍的内容将包括 : MOSN 与 SOFAMesh 的关系 准备工作 源码</description></item><item><title>使用 Nacos 作为注册中心</title><link>/projects/sofa-rpc/registry-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-nacos/</guid><description>SOFARPC 已支持使用 Nacos 作为服务注册中心。假设你已经根据 Nacos 的快速开始在本地部署好 Nacos Server，服务发现的端口默认设置在 8848。 在 SOFARPC 中使用 Nacos 作为服务</description></item><item><title>使用 SOFARegistry 作为注册中心</title><link>/projects/sofa-rpc/registry-sofa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-sofa/</guid><description>SOFARPC 已支持使用 SOFARegistry 作为服务注册中心。假设你已经根据 SOFARegistry 的快速开始在本地部署好 SOFARegistry Server，服务发现的端口默认设置在 9603。 在 SOFARPC 中使用 SOFARegistry 作为服务</description></item><item><title>使用 SOFAStack 快速构建微服务</title><link>/guides/sofastack-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/sofastack-quick-start/</guid><description/></item><item><title>使用 Seata 保障支付一致性</title><link>/guides/kc-seata-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-seata-demo/</guid><description/></item><item><title>使用 Zookeeper 作为注册中心</title><link>/projects/sofa-rpc/registry-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-zookeeper/</guid><description>使用 Zookeeper 作为服务注册中心只需要在 application.properties 中如下配置即可： com.alipay.sofa.rpc.registry.address=zookeeper://127.0.0.1:2181 注意：考虑掉服务的实时性，以下特性暂不支持 SOFABoot RPC 也提供一个缓存文件(目前暂不支持)，当 Zookeeper 不可</description></item><item><title>使用本地文件作为注册中心</title><link>/projects/sofa-rpc/registry-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-local/</guid><description>使用本地文件作为服务注册中心在 application.properties 中如下配置即可： com.alipay.sofa.rpc.registry.address=local:///home/admin/registry/localRegistry.reg 其中 /home/admin/registry/localRegistry.reg 就是使用的本地文件的目录。 对于 windows 用户，则以上地址类似： com.alipay.sofa.rpc.registry.address=local://c://users/localRegistry.reg</description></item><item><title>依赖管理</title><link>/projects/sofa-boot/dependency-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/dependency-management/</guid><description>SOFABoot 是在 Spring Boot 的基础上提供的功能扩展。基于 Spring Boot 的机制，SOFABoot 管理了 SOFA 中间件的依赖，并且提供了 Spring Boot 的 Starter，方便用户在 Spring Boot 中使用</description></item><item><title>依赖组件版权说明</title><link>/projects/sofa-rpc/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/notice/</guid><description>SOFARPC 使用了一些三方开源组件，他们分别是： 一些主要依赖： Netty under Apache License 2.0 SLF4j under the MIT License SOFA Bolt under Apache License 2.0 Javassist under Apache License 2.0 Resteasy under Apache License 2.0 SOFA Hessian under Apache License 2.0 一些扩展依赖： protobuf under New BSD License</description></item><item><title>健康检查</title><link>/projects/sofa-boot/health-check/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/health-check/</guid><description>SOFABoot 为 Spring Boot 的健康检查能力增加了 Readiness Check 的能力。如果你需要使用 SOFA 中间件，那么建议使用 SOFABoot 的健康检查能力的扩展，来更优雅的上线应用实例 引入健康检查扩展 要</description></item><item><title>内置扩展 Metrics 指标</title><link>/projects/sofa-lookout/client-ext-metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/client-ext-metrics/</guid><description>目前默认生效的的扩展模块是：lookout-ext-jvm，lookout-ext-os(from v1.5.0)。 JVM 线程 metric name metric tags specification jvm.threads.totalStarted &amp;mdash; jvm.threads.active &amp;mdash; jvm.threads.peak</description></item><item><title>分布式一致性 Raft 与 JRaft</title><link>/projects/sofa-jraft/consistency-raft-jraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/consistency-raft-jraft/</guid><description>分布式共识算法 (Consensus Algorithm) 如何理解分布式共识? 多个参与者 针对 某一件事 达成完全 一致 ：一件事，一个结论 已达成一致的结论，不可推翻 有哪些分布式共识算法? P</description></item><item><title>单元测试与性能测试</title><link>/projects/sofa-rpc/test/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/test/</guid><description>单元测试 单元测试例子放到自己开发的模块下。 如果依赖了第三方服务端（例如Zookeeper），请手动加入 profile。参考 registry-zookeeper 模块代码。 如果依</description></item><item><title>参与贡献</title><link>/projects/sofa-acts/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/contributing/</guid><description>准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看git 官方书籍,需要阅读前几章来熟悉。 git 协作流程可以查看这篇文章G</description></item><item><title>参与贡献</title><link>/projects/sofa-boot/sofa-ark-contribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-contribution/</guid><description>可以先去 发展路线 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看 git官方书籍，需要阅</description></item><item><title>参与贡献</title><link>/projects/sofa-dashboard/contribution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/contribution/</guid><description>可以先去 RoadMap 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看 git官方书籍，需要阅读前几</description></item><item><title>参与贡献</title><link>/projects/sofa-registry/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/contributing/</guid><description>可以先去 发展路线 &amp;amp; 任务认领 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看git官方书</description></item><item><title>参与贡献</title><link>/projects/sofa-rpc/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/contributing/</guid><description>可以先去 发展路线 内了解下开发任务及未来规划。 准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 git 工具用法可以查看git官方书籍,需要阅</description></item><item><title>发展规划</title><link>/projects/sofa-lookout/plan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/plan/</guid><description>客户端发展规划 v2.0 ，在基于 Java 8 进行重构，v1.0 为支持 Java 6 做了些设计与性能妥协； 集成更多的开源产品；</description></item><item><title>发展路线</title><link>/projects/sofa-boot/sofa-ark-roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-roadmap/</guid><description>任务列表 下面表格记录了还没有实现的功能特性，欢迎大家认领任务，参与贡献。 类型 任务 困难度 认领人及时间 计划完成时间 进度 相关 Issue 代码 支持多个 Web 应用合</description></item><item><title>发展路线</title><link>/projects/sofa-rpc/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/roadmap/</guid><description>任务列表 部分内部已有的功能特性，待内部整理完毕后随各个迭代放出。 如果还没有实现的功能特性会列在下面的表格中，欢迎大家认领任务，参与贡献。 类型</description></item><item><title>发展路线</title><link>/projects/sofa-tracer/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/roadmap/</guid><description>任务列表 欢迎大家领取任务参与贡献。 类型 任务 困难度 认领人及时间 计划发布时间 计划完成时间 进度 相关 issue 代码 SOFATracer 性能优化专题 高 issue 18和 issue 11 代码 SOFATracer 支持 HttpClient 中</description></item><item><title>发展路线 &amp; 任务认领</title><link>/projects/sofa-registry/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/roadmap/</guid><description>发展路线 任务列表 部分内部已有的功能特性，待内部整理完毕后随各个迭代放出。 如果还没有实现的功能特性会列在下面的表格中，欢迎大家认领任务，参与贡</description></item><item><title>发布历史</title><link>/projects/mosn/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/release-notes/</guid><description>更多参见：https://github.com/mosn/mosn/blob/master/CHANGELOG_ZH.md</description></item><item><title>发布历史</title><link>/projects/sofa-rpc/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/release-notes/</guid><description>更多参见：https://github.com/sofastack/sofa-rpc/releases</description></item><item><title>发布说明</title><link>/projects/sofa-boot/sofa-ark-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-release/</guid><description>更多参见：https://github.com/sofastack/sofa-ark/releases</description></item><item><title>发布说明</title><link>/projects/sofa-dashboard/release-node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/release-node/</guid><description>更多参见：https://github.com/sofastack/sofa-dashboard/releases</description></item><item><title>发布说明</title><link>/projects/sofa-registry/release-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/release-notes/</guid><description>更多参见：https://github.com/sofastack/sofa-registry/releases</description></item><item><title>启动加速</title><link>/projects/sofa-boot/speed-up-startup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/speed-up-startup/</guid><description>SOFABoot 提供了模块并行加载以及 Spring Bean 异步初始化能力，用于加快应用启动速度。模块并行加载参考相应文档，下面介绍如何使用 SOFABoot 异步初始化 Spring Bean 能力来提高应用启</description></item><item><title>团队介绍</title><link>/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/team/</guid><description>团队成员（排名不分先后） 名字 github 角色 所在公司 肖宇 yu199195 VP 京东 张永伦 tuohai666 committer 京东 赵俊 cherrylzhao committer 联通 陈斌 prFor committer 某创业公司 李浪 cysy-lli committer 携程 汤煜冬 tydhot committer perfma</description></item><item><title>在 Kubernetes 中快速开始</title><link>/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-setup-zookeeper-quick-start-docker/</guid><description>本文旨在描述如何在 Kubernetes 快速开始安装和配置 Istio。 SOFA Mosn 不仅可以支持 Istio 标准的部署模式，也能支持单方面的 Inbound Sidecar，Outbound Sid</description></item><item><title>在 Kubernetes 中快速开始</title><link>/projects/sofa-mesh/sofa-mesh-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/sofa-mesh-setup/</guid><description>本文旨在描述如何在 Kubernetes 快速开始安装和配置 Istio。 SOFA Mosn 不仅可以支持 Istio 标准的部署模式，也能支持单方面的 Inbound Sidecar，Outbound Sid</description></item><item><title>基于 Serverless 轻松构建云上应用</title><link>/guides/kc-serverless-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-serverless-demo/</guid><description/></item><item><title>基础术语</title><link>/projects/sofa-boot/sofa-ark-terminology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-terminology/</guid><description>Ark 包 SOFAArk 定义特殊格式的可执行 Jar 包，使用官方提供的 Maven 插件 sofa-ark-maven-plugin 可以将工程应用打包成一个标准格式的 Ark 包；使用命令 java -jar 即可在 SOFAArk 容器之上启动应用；Ark 包</description></item><item><title>基础术语</title><link>/projects/sofa-registry/terminology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/terminology/</guid><description>业界通用术语 术语 说明 服务（Service） 通过网络提供的、具有特定业务逻辑处理能力的软件功能。 服务提供者（Service Provider） 通</description></item><item><title>基础术语</title><link>/projects/sofa-tracer/explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/explanation/</guid><description>名词 说明 TraceId TraceId 指的是 SOFATracer 中代表唯一一次请求的 ID，此 ID 一般由集群中第一个处理请求的系统产生，并在分布式调用下通过网络传递到下一个被请求系统。 SpanId SpanId</description></item><item><title>基础模型</title><link>/projects/sofa-rpc/common-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/common-model/</guid><description>消息 内部全部使用 SofaRequest 和 SofaResponse 进行传递。 如果需要转换为其它协议，那么在真正调用和收到请求的时候，转换为实际要传输的对象。 可以对 SofaRequest 和 SofaResponse 进行写操作的模块</description></item><item><title>如何参与 SOFAJRaft 代码贡献</title><link>/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/how-to-contribute-code-to-sofajraft/</guid><description>准备工作 贡献代码前需要先了解 git 工具的使用和 GitHub 网站的使用。 - git 工具用法可以查看 git 官方书籍,需要阅读前几章来熟悉。 - git 协作流程可以查看这篇文章 git</description></item><item><title>如何打包 Ark Plugin</title><link>/projects/sofa-boot/sofa-ark-ark-plugin-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-plugin-demo/</guid><description>简介 该样例工程演示了如何借助 maven 插件将一个普通的 Java 工程打包成标准格式规范的 Ark Plugin 背景 现实开发中，常常会遇到依赖包冲突的情况；假设我们开发了一个类</description></item><item><title>如何打包 Ark 包</title><link>/projects/sofa-boot/sofa-ark-ark-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofa-ark-ark-demo/</guid><description>简介 该样例工程演示了如何借助 Maven 插件将一个 Spring Boot Web 工程打包成标准格式规范的可执行 Ark 包； 准备 因该样例工程依赖 sample-ark-plugin，因</description></item><item><title>如何编译 SOFARPC 工程</title><link>/projects/sofa-rpc/how-to-build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/how-to-build/</guid><description>如何编译 安装 JDK7 及以上，Maven 3.2.5 及以上。 直接下载代码，然后执行如下命令： cd sofa-rpc mvn clean install 注意：不能在子目录（即子模块）下进行编译。因为 SOFARPC 模块太多</description></item><item><title>安装指南</title><link>/projects/sofa-mesh/pilot-setup-zookeeper-installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-mesh/pilot-setup-zookeeper-installation/</guid><description>在非 Kubernetes 环境下使用 Istio 需要达成以下的关键任务： 为 Istio 控制平面配置 Istio API server，也可以通过 memostore 的方式启动 Pilot 用作演示用途。 给所有微服务实例手工添加 SOFA</description></item><item><title>完整配置参数</title><link>/projects/sofa-rpc/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/configuration/</guid><description>提供可以允许配置的所有参数。 * 发布订阅配置 * 预热转发配置 * 自动故障剔除配置</description></item><item><title>客户端 API 使用指南</title><link>/projects/sofa-lookout/use-guide-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-api/</guid><description>客户端 API 使用说明 SOFALookout 客户端设计上保持了 API 与实现解耦。如果我们只需要基于 SOFALookout API 进行埋点，那么只需要依赖 API 包即可。在没有依赖具体实现模块依赖时（比如</description></item><item><title>客户端 Registry 使用指南</title><link>/projects/sofa-lookout/use-guide-registry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-registry/</guid><description>Registry 的使用 不同的 Registry 的集成提供了不同的访问 Metrics 的方式。 1. LookoutRegistry 提供按照一定时间窗口统计 metrics 的能力。它又分为“主动推”和“被动拉”两种模式，暂时被动拉取模</description></item><item><title>客户端使用</title><link>/projects/sofa-registry/client-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/client-quick-start/</guid><description>1. 创建 Maven 工程 服务端部署完毕后，我们可以新建一个 Maven 工程使用 SOFARegistry 提供的服务。首先新建一个 Maven 工程，然后引入如下依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;registry-client-all&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${registry.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2. 发布数据 // 构建客户端</description></item><item><title>客户端快速开始 - SOFABoot 项目</title><link>/projects/sofa-lookout/quick-start-client-boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/quick-start-client-boot/</guid><description>该项目演示了如何在 SOFABoot 中使用 SOFALookout 并且对接到 Spring Boot 的 Actuator 中。如果想要对接到 Prometheus 上或者其他的 Registry 中，请参考 Registry 一节。 新建 SpringBoot（或 SofaBoot ）项目 新建一</description></item><item><title>客户端快速开始 - 普通 Java 项目</title><link>/projects/sofa-lookout/quick-start-client-java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/quick-start-client-java/</guid><description>普通 Java 项目 在应用中加入 client 的 Maven 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alipay.sofa.lookout&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lookout-client&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${lookout.client.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; lookout-client 默认依赖了 lookout-reg-server 模块（支持向 lookout server 上报 metrics 数据），如果希望使用其他类型注册表(比如 lookout-reg</description></item><item><title>客户端调用流程</title><link>/projects/sofa-rpc/client-invoke-flow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/client-invoke-flow/</guid><description>客户端模块是一个较复杂的模块，这里包含了集群管理、路由、地址管理器、连接管理器、负载均衡器，还与代理、注册中心等模块交互。 参见：</description></item><item><title>客户端配置</title><link>/projects/sofa-lookout/client-configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/client-configuration/</guid><description>客户端配置项设置示例 lookoutConfig.setProperty(LookoutConfig.LOOKOUT_AGENT_HOST_ADDRESS,&amp;quot;127.0.0.1&amp;quot;); 客户端配置项说明 配置项 对应 SpringBoot 配置项 默认配置值 说明 lookout.enable com.alipay.sofa.lookout.enable true 功能开关，默认是 true。如果改为 false，那么所有 metrics 就几乎没</description></item><item><title>容灾恢复</title><link>/projects/sofa-rpc/fault/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/fault/</guid><description>包含单机故障剔除和 Hystrix 熔断。</description></item><item><title>工程示例</title><link>/projects/mosn/quick-start-run-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/quick-start-run-samples/</guid><description>本文档中提供了 MOSN 的示例工程。 使用 MOSN 作为 HTTP 代理 请参考 MOSN 转发 HTTP 的示例工程 http-sample。 使用 MOSN 作为 SOFARPC 代理 请参考 MOSN 转发 SOFARPC 的示例工程 sofa</description></item><item><title>工程示例</title><link>/projects/sofa-lookout/use-guide-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-samples/</guid><description>源码工程中提供了一些样例工程，辅助说明项目的使用。样例工程的 readme 有使用补充说明，另外需要将这些 sample 工程单独的导入 IDE。 客户端样例工程 lookout-client-samples-java 该样例工</description></item><item><title>常见问题</title><link>/projects/sofa-acts/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/faq/</guid><description>Q：报错误 NoSuchMethodError 一般情况下该类错误由依赖冲突导致。已知的依赖冲突列举如下，遇到时选择性排除它们。 日志冲突 commons-logging 冲突 &amp;lt;exclusion&amp;gt; &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt; &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt; &amp;lt;/exclusion&amp;gt; logback-classic 冲突 在冲突位置将 logback-classic 排除，</description></item><item><title>常见问题</title><link>/projects/sofa-boot/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/faq/</guid><description>Q: Readiness Check 有啥应用场景？ Liveness Check 和 Readiness Check 概念来自于 Kuberentes，分别代表运行时检查和启动时检查。Spring Boot 提供了 Liveness Check，但是没有提供</description></item><item><title>常见问题</title><link>/projects/sofa-lookout/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/faq/</guid><description>与 Prometheus的差异 答：主要包括:（1）Lookout metrics server 支持适配更多的协议接入；（2）聚焦在围绕 ES 生态提供易使用和运维的最佳实践；</description></item><item><title>常见问题</title><link>/projects/sofa-rpc/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/faq/</guid><description>咨询 Q: SOFARPC 是蚂蚁金服内部使用的版本吗？ 是的，SOFARPC 有良好的扩展接口，内部使用的版本就是在开源的版本多一些扩展实现。例如我们云上的商业版</description></item><item><title>序列化协议</title><link>/projects/sofa-rpc/serialization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/serialization/</guid><description>SOFARPC 可以在使用 Bolt 通信协议的情况下，可以选择不同的序列化协议，目前支持 hessian2 和 protobuf。 默认的情况下，SOFARPC 使用 hessian2 作为序列化协议，如</description></item><item><title>应用日志打印 traceId 和 spanId</title><link>/projects/sofa-tracer/print-traceid-spanid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/print-traceid-spanid/</guid><description>SLF4J 提供了 MDC （Mapped Diagnostic Contexts）功能，可以支持用户定义和修改日志的输出格式以及内容。本文将介绍 SOFATracer 集成的 SLF4J MDC功能，方便用户在只</description></item><item><title>应用面板</title><link>/projects/sofa-dashboard/dashboard-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/dashboard-client/</guid><description>SOFADashboard 支持查看应用的IP、端口、健康检查状态等基本信息。此功能依赖 SOFADashboard client ，如果一个应用需要将应用信息展示到 SOFADashboard 管控端，可以通过引入客户端依赖即可： &amp;lt;denpendency&amp;gt;</description></item><item><title>开发指南</title><link>/projects/sofa-lookout/development-use-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/development-use-guide/</guid><description>首先参考基本代码贡献需知 注意测试用例覆盖率； 代码格式； 验证 Samples 单独导入 Samples 的 Maven 项目； 修改对应 Pom 文件中依赖版本； 验证 Samples 也能正确工作；</description></item><item><title>开发者手册</title><link>/projects/sofa-acts/developer-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/developer-guide/</guid><description>1.如何编译 安装 JDK7 及以上，Maven 3.2.5 及以上。 直接下载代码，然后在代码目录下执行如下命令： mvn clean install 2.版本发布 版本号 采用三位版本号，分别是主版</description></item><item><title>开发者手册</title><link>/projects/sofa-rpc/developer-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/developer-guide/</guid><description>介绍实现架构和相关的细节介绍： * 如何编译 * 架构介绍 * 调用流程 * 基础模型 * 扩展点设计 * 版本发布 * 测试</description></item><item><title>异步线程处理</title><link>/projects/sofa-tracer/async/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/async/</guid><description>线程中使用 java.lang.Runnable 如果用户在代码中通过 java.lang.Runnable 新启动了线程或者采用了线程池去异步地处理一些业务，那么需要将 SOFATracer 日志上下文从父线程传递到子线程中去，SOFA</description></item><item><title>快速开始</title><link>/projects/mosn/quick-start-setup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/quick-start-setup/</guid><description>本文用于帮助初次接触 MOSN 项目的开发人员，快速搭建开发环境，完成构建，测试，打包和示例代码的运行。 注：MOSN 基于 Go 1.12.7 开发，使用 dep 进行依赖管理。</description></item><item><title>快速开始</title><link>/projects/sofa-acts/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/getting-started/</guid><description>本文档共分为四部分： 第一部分：在 Intellij IDEA 上安装 ACTS IDE 可视化编辑器； 第二部分：向您介绍如何在多模块工程中引入 ACTS 依赖； 第三部分：测试模块下一键搭建 ACTS 框</description></item><item><title>快速开始</title><link>/projects/sofa-boot/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/quick-start/</guid><description>在本文档中，将创建一个 Spring Boot 的工程，引入 SOFABoot 基础依赖，并且引入 SOFABoot 的健康检查扩展能力，演示如何快速上手 SOFABoot。 环境准备 要使用 SOFABo</description></item><item><title>快速开始</title><link>/projects/sofa-dashboard/quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/quick-start/</guid><description>这个快速开始可以帮您快速在您的电脑上，下载、安装并使用 SOFADashboard。 环境准备 sofa-dashboard-backend 依赖 Java 环境来运行。请确保是在以下运行环境可以正常</description></item><item><title>快速开始</title><link>/projects/sofa-rpc/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/getting-started/</guid><description>SOFARPC 有多种编程界面，下面会对各种界面进行举例： - SOFARPC 方式 - SOFABoot 方式</description></item><item><title>快速开始指南</title><link>/projects/sofa-tracer/component-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/component-access/</guid><description>SOFATracer 接入的组件列表参考：SOFATracer 介绍，在使用时请注意不同组件对应的SOFATracer 版本和 JDK 版本。 环境准备 要使用 SOFABoot</description></item><item><title>手动埋点</title><link>/projects/sofa-tracer/flexible/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/flexible/</guid><description>SOFATracer 此前的埋点均是基于组件维度的埋点，用户很难在自己业务代码中进行埋点操作，或者增加自定义 tag 值来监控一些链路信息。基于此，SOFATracer</description></item><item><title>扩容与缩容</title><link>/projects/sofa-registry/scale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/scale/</guid><description>1. 集成部署模式 1.1 扩容 registry-integration 假设目前已经部署了 3 台 registry-integration，分别是 node1/node2/node3，扩容的新节点</description></item><item><title>扩展功能</title><link>/projects/sofa-acts/usage-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/usage-api/</guid><description>自定义引擎各个阶段 可以在测试脚本中或者基类中重写 ActsTestBase 提供的 API。 重写 prepare，execute，check，clear 等。可以通过在 super.prepare() 之</description></item><item><title>扩展点设计</title><link>/projects/sofa-rpc/extension-loader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/extension-loader/</guid><description>ExtensionLoader 为了对 SOFARPC 各个环节的都有充足的可扩展性，SOFA-RPC定义了一套十分灵活的扩展机制，所有扩展实现都是平等的。 这套机制不管是对SOFA-RP</description></item><item><title>服务发布与引用</title><link>/projects/sofa-rpc/publish-and-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/publish-and-reference/</guid><description>SOFARPC 的服务发布和引用的基本配置已经在「编程界面」章节中说明，这里主要介绍服务发布和引用的一些特性。 同一服务发布多种协议 在 SOFARPC 中，可以将同一个服务</description></item><item><title>服务器端 ES 存储使用指南</title><link>/projects/sofa-lookout/use-guide-es/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-es/</guid><description>自动化 推荐版本: ES 5 自动初始化库 Lookout 服务器端启动时，会自动检查（默认开启，可关闭）所连接的ES机器(或集群)，检查 Metrics 数据存储的 Index和 Mapping 是</description></item><item><title>服务器端 Grafana 使用指南</title><link>/projects/sofa-lookout/use-guide-grafana/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-grafana/</guid><description>由于 SOFALookout Metrics Server 兼容 Prometheus API,所以 Grafana 集成 Lookout 很简单，只需要选择 Prometheus 作为数据源协议即可 （注意 Lookout Server 的默认查询端口也是: 9090）。 下图展示 Grafana 新增数据源配置</description></item><item><title>服务器端 Metrics 存储扩展机制</title><link>/projects/sofa-lookout/use-guide-storage-ext/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-storage-ext/</guid><description>如果需要扩展支持适配一个新的数据存储，可能需要下面的步骤: 1.写入适配 需要在 gateway/metrics/exporter/ 下面添加新的 exporter; 参考已有的 &amp;ldquo;gateway/metrics/exporter/elasticsearch&amp;rdquo; 模块； 提供个新存储的 MetricExporter 功能是写入数据</description></item><item><title>服务器端 PromQL 语法特性增强</title><link>/projects/sofa-lookout/use-guide-promql-feature-enhancement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-promql-feature-enhancement/</guid><description>1. Tag选择器的“in”筛选 =~| 将tag符合表达式的提供的值选择出来，类似于SQL中的in语义 示例 将app为 foo 或 foo2的应用时序数据查询出来</description></item><item><title>服务器端常见数据采集协议支持</title><link>/projects/sofa-lookout/use-guide-other-metrics-protocol-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-lookout/use-guide-other-metrics-protocol-support/</guid><description>使用 Lookout sdk是推荐方式，当然 Lookout gateway 还支持其他协议上报。（但由于属于非标接入，细节可联系我们） 注意如果使用 非lookout sdk ，自己一定注意控制客</description></item><item><title>服务治理</title><link>/projects/sofa-dashboard/governance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/governance/</guid><description>SOFADashboard 服务治理主要是对 SOFARpc 的服务进行管理。 目前已经支持基于 ZK 和 SofaRegistry 两个注册中心。 功能展示 1、基于服务维度 服务列表 服务提供者详情： 2、基于应用维度 应用</description></item><item><title>服务端部署</title><link>/projects/sofa-registry/server-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/server-quick-start/</guid><description>部署模式 SOFARegistry 支持两种部署模式，分别是集成部署模式及独立部署模式，本文将介绍最简单的单节点集成部署模式，更多更详细的部署模式介绍可以查看 部署文档</description></item><item><title>术语</title><link>/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/term/</guid><description>术语 发起者：全局事务的发起者，在一个请求链路资源方法里面，最先需要对分布式资源进行事务处理的地方，在Hmily框架里面 可以表示为：一个请求最</description></item><item><title>核心引擎设计</title><link>/projects/sofa-jraft/engine-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/engine-architecture/</guid><description>如图: Node Raft 分组中的一个节点，连接封装底层的所有服务，用户看到的主要服务接口，特别是 apply(task) 用于向 raft group 组成的复制状态机集群提交新任务应用到业务状态机</description></item><item><title>核心概念</title><link>/projects/mosn/concept/core-concept/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/core-concept/</guid><description>MOSN 主要划分为如下模块，包括了网络代理具备的基础能力，也包含了 xDS 等云原生能力。 xDS（UDPA）支持 MOSN 支持云原生统一数据面 API（UDPA），</description></item><item><title>框架准备</title><link>/projects/sofa-acts/usage-ready/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-acts/usage-ready/</guid><description>框架准备 在阅读前，您可以参考快速开始下载并安装 ACTS IDE 和引入 ACTS 框架. 本部分主要包含编码说明、数据源配置和一键配置说明，以帮助您使用 ACTS 框架。 编码说</description></item><item><title>模块化开发概述</title><link>/projects/sofa-boot/modular-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/modular-development/</guid><description>SOFABoot 从 2.4.0 版本开始支持基于 Spring 上下文隔离的模块化开发能力。为了更好的理解 SOFABoot 模块化开发的概念，我们来区分几个常见的模块化形式： 基于代码组织上的模块化</description></item><item><title>模块并行化启动</title><link>/projects/sofa-boot/parallel-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/parallel-start/</guid><description>SOFABoot 会根据 Require-Module 计算模块依赖树，例如以下依赖树表示模块B 和模块C 依赖模块A，模块E 依赖模块D，模块F 依赖模块E： 该依赖树会保证模块A 必定在模块B 和</description></item><item><title>模块配置</title><link>/projects/sofa-boot/sofaboot-module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/sofaboot-module/</guid><description>SOFABoot 模块是一个普通的 Jar 包加上一些 SOFABoot 特有的配置，这些 SOFABoot 特有的配置，让一个 Jar 包能够被 SOFABoot 识别，使之具备模块化的能力。 一个完整的 SOFABoot 模块和一个普通的 Jar 包</description></item><item><title>注册中心扩展指南</title><link>/projects/sofa-rpc/registry-extension-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-extension-guide/</guid><description>如果你要扩展一个注册中心，我们先看下注册中心的抽象类。 package com.alipay.sofa.rpc.registry; @Extensible(singleton = false) public abstract class Registry implements Initializable, Destroyable { public abstract boolean start(); public abstract void register(ProviderConfig config); public abstract void unRegister(ProviderConfig config); public abstract void batchUnRegister(List&amp;lt;ProviderConfig&amp;gt; configs); public abstract List&amp;lt;ProviderGroup&amp;gt; subscribe(ConsumerConfig config); public abstract void unSubscribe(ConsumerConfig config); public</description></item><item><title>注册中心选择</title><link>/projects/sofa-rpc/registry-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/registry-usage/</guid><description>SOFABoot RPC Starter 为用户提供多种注册中心选择和方便的配置。 目前 bolt ， rest ， dubbo 都支持 Zookeeper 作为注册中心。另外 bolt ， rest 支持本地文件系统作为注册中心，该种模式一般用于测</description></item><item><title>流量劫持</title><link>/projects/mosn/concept/traffic-hijack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/concept/traffic-hijack/</guid><description>本文描述的是 MOSN 作为 Sidecar 使用时的流量劫持方案。 MOSN 作为 Sidecar 和业务容器部署在同一个 Pod 中时，需要使得业务应用的 Inbound 和 Outbound 服务请求都能够经过 Sidecar 处理。区别于 Istio 社</description></item><item><title>版本发布</title><link>/projects/sofa-rpc/version-release/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/version-release/</guid><description>版本号 采用三位版本号，分别是主版本号、次版本号、修订版本号。例如 5.1.2。 参见: http://semver.org/lang/zh-CN/</description></item><item><title>版本发行日志</title><link>/projects/sofa-jraft/release-log/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/release-log/</guid><description>1.3.2 2020-06-19 Bug Fixes 移除对 bolt address parser 的扩展，避免 check connection 返回结果不符合预期 SPI 组件 JRaftServiceLoader 改为延迟加载策略规避多余对象的创建 几个 corner case 修复，比如 replicate logs 如果比 appliedI</description></item><item><title>版本查看</title><link>/projects/sofa-boot/view-versions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/view-versions/</guid><description>通过 SOFABoot，我们可以直接在浏览器中就可以查看 SOFA 中间件的版本等详细信息。 引入 SOFABoot Infra 依赖 要在 SOFABoot 中直接通过浏览器查看 SOFA 中间件的版本信息，只</description></item><item><title>版本规范</title><link>/projects/sofa-dashboard/version-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/version-rule/</guid><description>版本号 采用三位版本号，分别是主版本号、次版本号、修订版本号。例如 1.0.0。 参见: http://semver.org/lang/zh-CN/ 主版本号：主版本号内的所有版本必须相互兼容；与其它主版本</description></item><item><title>版本规范</title><link>/projects/sofa-registry/release-standard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/release-standard/</guid><description>版本号 采用三位版本号，分别是主版本号、次版本号、修订版本号。例如 5.2.0。 参见: http://semver.org/lang/zh-CN/ 主版本号：主版本号内的所有版本必须相互兼容；与其它主版本</description></item><item><title>版权声明</title><link>/projects/sofa-boot/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-boot/notice/</guid><description>SOFABoot 使用了一些三方开源组件，他们分别是： 一些主要依赖： Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License sofa-common-tools under Apache 2.0 license 一些扩展依赖： nuxeo under Apache License, Version 2.0 &amp;hellip; 其它整理中。</description></item><item><title>版权声明</title><link>/projects/sofa-dashboard/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/notice/</guid><description>依赖组件版权说明 SOFADashboard 使用了一些三方开源组件，他们分别是： Spring under Apache 2.0 license Spring Boot under Apache 2.0 license SLF4j under the MIT License SOFA Bolt under Apache License 2.0 SOFA Bolt under Apache License 2.0 Curator under Apache License 2.0 &amp;hellip; 其它整理中。</description></item><item><title>版权声明</title><link>/projects/sofa-registry/notice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/notice/</guid><description>依赖组件版权说明 SOFARegistry 使用了一些三方开源组件，他们分别是： Spring under Apache 2.0 license Spring Boot under Apache 2.0 license Netty under Apache License 2.0 SLF4j under the MIT License jersey under CDDL Version 1.1 SOFAJRaft under Apache License 2.0 SOFABolt under Apache License 2.0 SOFAHessian under Apache License 2.0 &amp;hellip; 其</description></item><item><title>用户案例</title><link>/projects/sofa-jraft/user-stories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-jraft/user-stories/</guid><description>RheaKV：基于 JRaft 和 RocksDB 实现的嵌入式、分布式、高可用、强一致的 KV 存储类库。 AntQ Streams QCoordinator： 使用 JRaft 在 coordinator 集群内做选举、元信息存储等</description></item><item><title>直连调用</title><link>/projects/sofa-rpc/peer-to-peer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/peer-to-peer/</guid><description>SOFARPC 支持指定地址进行调用的场景。用 Java API 的使用方式如下，设置直连地址即可： ConsumerConfig&amp;lt;HelloService&amp;gt; consumer = new ConsumerConfig&amp;lt;HelloService&amp;gt;() .setInterfaceId(HelloService.class.getName()) .setRegistry(registryConfig) .setDirectUrl(&amp;quot;bolt://127.0.0.1:12201&amp;quot;); 用 XML 的使用方式如下： &amp;lt;sofa:reference interface=&amp;quot;com.alipay.sample.HelloService&amp;quot; id=&amp;quot;helloService&amp;quot;&amp;gt; &amp;lt;sofa:binding.bolt&amp;gt; &amp;lt;sofa:route target-url=&amp;quot;127.0.0.1:12200&amp;quot;/&amp;gt; &amp;lt;/sofa:binding.bolt&amp;gt; &amp;lt;/sofa:reference&amp;gt; 用 Annotation 的使用方式如下</description></item><item><title>编程界面</title><link>/projects/sofa-rpc/programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/programming/</guid><description>介绍几种 SOFARPC 在不同环境下的使用方式 * 非 Spring 环境 API 使用 * SOFABoot 环境 XML 配置使用 * SOFABoot 环境注解使用 * SOFABoot 环境动态 API 使用</description></item><item><title>自动故障剔除</title><link>/projects/sofa-rpc/configuration-fault-tolerance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/configuration-fault-tolerance/</guid><description>自动故障剔除会自动监控 RPC 调用的情况，对故障节点进行权重降级，并在节点恢复健康时进行权重恢复。目前支持 bolt 协议。 在 SOFABoot 中，只需要配置自动故障剔除的</description></item><item><title>自动故障剔除</title><link>/projects/sofa-rpc/fault-tolerance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/fault-tolerance/</guid><description>集群中通常一个服务有多个服务提供者。其中部分服务提供者可能由于网络，配置，长时间 fullgc ，线程池满，硬件故障等导致长连接还存活但是程序已经无法正常</description></item><item><title>自定义 Reporter</title><link>/projects/sofa-tracer/reporter-custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/reporter-custom/</guid><description>在使用自定义埋点组件的情况下，用户可以选择自定义 Reporter。 自定义 Reporter 实现 public class MyReporter implements Reporter { @Override public String getReporterType() { return &amp;quot;myReporter&amp;quot;; } @Override public void report(SofaTracerSpan sofaTracerSpan) { // System.out 输出 System.out.println(&amp;quot;this is my custom reporter&amp;quot;); } @Override</description></item><item><title>自定义线程池</title><link>/projects/sofa-rpc/custom-threadpool/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/custom-threadpool/</guid><description>SOFARPC 支持自定义业务线程池。可以为指定服务设置一个独立的业务线程池，和 SOFARPC 自身的业务线程池是隔离的。多个服务可以共用一个独立的线程池。 SOFARPC 要求自定义</description></item><item><title>自定义路由寻址</title><link>/projects/sofa-rpc/custom-router/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/custom-router/</guid><description>SOFARPC 中对服务地址的选择也抽象为了一条处理链，由每一个 Router 进行处理。同 Filter 一样， SOFARPC 对 Router 提供了同样的扩展能力。 @Extension(value = &amp;quot;customerRouter&amp;quot;) @AutoActive(consumerSide = true) public class CustomerRouter extends Router { @Override public void init(ConsumerBootstrap consumerBootstrap) { } @Override</description></item><item><title>自定义过滤器</title><link>/projects/sofa-rpc/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/custom-filter/</guid><description>SOFARPC 提供了一套良好的可扩展性机制，为各个模块提供 SPI 的能力。 SOFARPC 对请求与响应的过滤链处理方式是通过多个过滤器 Filter 来进行具体的拦截处理，该部分可由用户</description></item><item><title>自定义配置说明</title><link>/projects/mosn/configuration/custom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/custom/</guid><description>本文是对 MOSN 自定义配置的说明。 Duration String 字符串，由一个十进制数字和一个时间单位后缀组成，有效的时间单位为 ns、us（或µs）、ms、s、m、h，例如</description></item><item><title>调用重试</title><link>/projects/sofa-rpc/retry-invoke/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/retry-invoke/</guid><description>SOFARPC 支持进行框架层面的重试策略，前提是集群模式为 FailOver（SOFARPC 默认即为 FailOver 模式）。重试只有在发生服务端的框架层面异常或者是超时</description></item><item><title>负载均衡</title><link>/projects/sofa-rpc/load-balance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/load-balance/</guid><description>SOFARPC 提供多种负载均衡算法，目前支持以下五种： 类型 名称 描述 random 随机算法 默认负载均衡算法。 localPref 本地优先算法 优先发现是否本机发布了该服务，如果没有再采用</description></item><item><title>路线图及任务认领</title><link>/projects/sofa-dashboard/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-dashboard/roadmap/</guid><description>任务列表 下面表格记录了还没有实现的功能特性，欢迎大家认领任务，参与贡献。 类型 任务 困难度 认领人及时间 计划完成时间 进度 相关 Issue 文档 SOFADashboard 配置参数文档 简</description></item><item><title>运维命令</title><link>/projects/sofa-registry/management-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/management-api/</guid><description>1. registry-meta 1.1 推送开关 在注册中心新版本发布的过程中为了把对业务的影响减少到最小，避免服务端重启动引发大规模服务地址信息变更产生大量推送，我们提供运维</description></item><item><title>通信协议</title><link>/projects/sofa-rpc/protocol/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/protocol/</guid><description>SOFARPC 支持不同的通信协议，目前支持 Bolt, RESTful 和 Dubbo，详细的事情请参考各个协议对应的文档： * Bolt 协议 * 基本使用 * 调用方式 * 超时控制 * 泛化调用 * 序列化</description></item><item><title>部署</title><link>/projects/sofa-registry/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-registry/deployment/</guid><description>环境准备 要使用 SOFARegistry，需要先准备好基础环境，SOFARegistry 依赖以下环境： * Linux/Unix/Mac/Windows * JDK8 * 需要采用 Apache Maven 3.2.5 或者以上的版本来</description></item><item><title>配置概览</title><link>/projects/mosn/configuration/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/mosn/configuration/overview/</guid><description>MOSN 的配置文件可以分为以下四大部分： Servers 配置，目前仅支持最多 1 个 Server 的配置，Server 中包含一些基础配置以及对应的 Listener 配置 ClusterManager 配置，包含 MOSN 的 Upstream 详细信</description></item><item><title>采样模式</title><link>/projects/sofa-tracer/sampler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-tracer/sampler/</guid><description>目前 SOFATracer 提供了两种采样模式，一种是基于 BitSet 实现的基于固定采样率的采样模式；另外一种是提供给用户自定义实现采样的采样模式。下面通过案例来演示如何使</description></item><item><title>链路数据透传</title><link>/projects/sofa-rpc/invoke-chain-pass-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/invoke-chain-pass-data/</guid><description>链路数据透传 链路数据透传功能支持应用向调用上下文中存放数据，达到整个链路上的应用都可以操作该数据。 使用方式如下，可分别向链路的 request 和 response 中放入数</description></item><item><title>链路追踪</title><link>/projects/sofa-rpc/tracing-usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/tracing-usage/</guid><description>默认 SOFARPC 已经集成了 SOFATracer，用户也可以使用其他的 APM 产品，如 Skywalking来实现相应的功能。详见文档： SOFATracer Skywalking 如果想要关闭 SOFARPC 的链路</description></item><item><title>问题</title><link>/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/faq/</guid><description>我引用了jar包，发现启动不了，报错怎么办？ 答：这种需要你自己去定位问题，查看是否按照文档来进行配置，环境是否正确，是否有依赖冲突问题，实在</description></item><item><title>集成 SOFARPC RESTful 服务和 Swagger</title><link>/projects/sofa-rpc/restful-swagger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/restful-swagger/</guid><description>从 rpc-sofa-boot-starter 6.0.1 版本开始，SOFARPC 提供了 RESTful 服务和 Swagger 的一键集成的能力。 在使用了 rpc-sofa-boot-starter 的情况下，如果想要开启 swagger 的能力，首先需要在 pom.xml 中增加 Swagger 的依赖： &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.swagger.core.v3&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;swagger-jaxrs2&amp;lt;/artifactId&amp;gt;</description></item><item><title>非 Spring 环境 API 使用</title><link>/projects/sofa-rpc/programing-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/programing-rpc/</guid><description>服务发布 服务发布过程涉及到三个类 RegistryConfig ，ServerConfig ，ProviderConfig 。 1. RegistryConfig RegistryConfig registryConfig = new RegistryConfig() .setProtocol(&amp;quot;zookeeper&amp;quot;) .setAddress(&amp;quot;127.0.0.1:2181&amp;quot;) RegistryConfig 表示注册中心。如上声明了服务</description></item><item><title>预热权重</title><link>/projects/sofa-rpc/provider-warmup-weight/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/sofa-rpc/provider-warmup-weight/</guid><description>预热权重功能让客户端机器能够根据服务端的相应权重进行流量的分发。该功能也常被用于集群内少数机器的启动场景。利用流量权重功能在短时间内对服务端</description></item></channel></rss>