<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SOFAStack on dromara(Open source organization)</title><link>/</link><description>Recent content in SOFAStack on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Soul网关学习(2-3)Http客户端接入源码解析</title><link>/blog/soul_source_learning_02_http_client_register/source-learning-02-http-client-register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_http_client_register/source-learning-02-http-client-register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul网关学习(2-2)Http代理之divide插件源码解析</title><link>/blog/soul_source_learning_02_divide_plugin_source/source-learning-02-divide-plugin-source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_divide_plugin_source/source-learning-02-divide-plugin-source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul网关学习(2-1)Http代理之divide插件使用</title><link>/blog/soul_source_learning_02_divide_plugin/source-learning-02-divide-plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_02_divide_plugin/source-learning-02-divide-plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul网关学习(1)环境配置</title><link>/blog/soul_source_learning_01/source-learning-01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/blog/soul_source_learning_01/source-learning-01/</guid><description>Soul源码分析（1） 环境配置 soul is a High-Performance Java API Gateway GitHub：https://github.com/dromara/soul 官方文档：https</description></item><item><title>Service Mesh Webinar#2：基于 MOSN 和 Istio Service Mesh 的服务治理实践</title><link>/activities/service-mesh-webinar-2/</link><pubDate>Tue, 14 Jul 2020 15:00:00 +0800</pubDate><guid>/activities/service-mesh-webinar-2/</guid><description>概要 活动主题：Service Mesh Webinar#2：基于 MOSN 和 Istio Service Mesh 的服务治理实践 活动时间：7 月 22 日周四晚 8 点 活动形式：线上直播 报名方式：戳这里</description></item><item><title>SOFAChannel#17：网络通信框架 SOFABolt 的功能介绍及协议框架解析</title><link>/activities/sofa-channel-17/</link><pubDate>Fri, 12 Jun 2020 15:00:00 +0800</pubDate><guid>/activities/sofa-channel-17/</guid><description>概要 活动主题：SOFAChannel#17：网络通信框架 SOFABolt 的功能介绍及协议框架解析 活动时间：7 月 2 日周四晚 7 点 活动形式：线上直播 报名方式：戳</description></item><item><title>Service Mesh Webinar#1：多点生活在 Service Mesh 上的实践</title><link>/activities/service-mesh-webinar-1/</link><pubDate>Wed, 20 May 2020 15:00:00 +0800</pubDate><guid>/activities/service-mesh-webinar-1/</guid><description>概要 活动主题：Service Mesh Webinar#1：多点生活在 Service Mesh 上的实践——Istio + MOSN 在 Dubbo 场景下的探索之路 活动时间：5 月 28 日周四晚 8 点 活</description></item><item><title>SOFAChannel#16：不得不说的云原生隔离性</title><link>/activities/sofa-channel-16/</link><pubDate>Tue, 28 Apr 2020 15:00:00 +0800</pubDate><guid>/activities/sofa-channel-16/</guid><description>概要 活动主题：SOFAChannel#16：不得不说的云原生隔离性 活动时间：5 月 21 日周四晚 7 点 活动形式：线上直播 报名方式：戳这里 介绍 | SOFAChannel &amp;lt;SOFA:Channel/&amp;gt; 有</description></item><item><title>SOFAChannel#15：分布式链路组件 SOFATracer 埋点机制解析</title><link>/activities/sofa-channel-15/</link><pubDate>Fri, 17 Apr 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-15/</guid><description>概要 活动主题：SOFAChannel#15：分布式链路组件 SOFATracer 埋点机制解析 活动时间：4 月 23 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍 |</description></item><item><title>SOFAChannel#14：云原生网络代理 MOSN 的扩展机制解析</title><link>/activities/sofa-channel-14/</link><pubDate>Fri, 27 Mar 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-14/</guid><description>概要 活动主题：SOFAChannel#14：云原生网络代理 MOSN 的扩展机制解析 活动时间：4 月 9 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍</description></item><item><title>SOFAChannel#13：云原生网络代理 MOSN 的多协议机制解析</title><link>/activities/sofa-channel-13/</link><pubDate>Mon, 16 Mar 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-13/</guid><description>概要 活动主题：SOFAChannel#13：云原生网络代理 MOSN 的多协议机制解析 活动时间：3 月 26 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介</description></item><item><title>&lt;SOFA:BootLab/&gt;</title><link>/activities/sofa-boot-lab/</link><pubDate>Tue, 03 Mar 2020 12:00:00 +0800</pubDate><guid>/activities/sofa-boot-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:BootLab/&amp;gt;是《剖析 | SOFABoot 框架》系列，会逐步详细</description></item><item><title>Service Mesh 终端用户调查报告</title><link>/service-mesh-end-user-survey-report/</link><pubDate>Fri, 14 Feb 2020 16:00:00 +0800</pubDate><guid>/service-mesh-end-user-survey-report/</guid><description>2020 年 2 月 4 日到 2 月11 日，ServiceMesher 社区发起了 Service Mesh 终端用户调查，以下为问卷调查结果。 参与问卷调查的人员情况 共收集到 516 份问卷结</description></item><item><title>SOFAChannel#12：蚂蚁金服分布式事务实践解析</title><link>/activities/sofa-channel-12/</link><pubDate>Wed, 12 Feb 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-12/</guid><description>概要 活动主题：SOFAChannel#12：蚂蚁金服分布式事务实践解析 活动时间：3 月 12 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这里 介绍 | SOFAChannel</description></item><item><title>SOFAChannel#11：从一个例子开始体验轻量级类隔离容器 SOFAArk</title><link>/activities/sofa-channel-11/</link><pubDate>Fri, 17 Jan 2020 17:00:00 +0800</pubDate><guid>/activities/sofa-channel-11/</guid><description>概要 活动主题：SOFAChannel#11：从一个例子开始体验轻量级类隔离容器 SOFAArk 活动时间：2 月 13 日周四晚 7 点 活动形式：线上直播 直播回顾：戳这</description></item><item><title>SOFAChannel#10：分布式事务 Seata 长事务解决方案 Saga 模式详解</title><link>/activities/sofa-channel-10/</link><pubDate>Tue, 31 Dec 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-10/</guid><description>概要 活动主题：SOFAChannel#10：分布式事务 Seata 长事务解决方案 Saga 模式详解 活动时间：1 月 9 日周四晚 7 点 活动形式：线上直播 活动回顾：戳这</description></item><item><title>Service Mesh Meetup#9 杭州站：To Infinity and Beyond</title><link>/activities/service-mesh-meetup-9/</link><pubDate>Wed, 11 Dec 2019 16:00:00 +0800</pubDate><guid>/activities/service-mesh-meetup-9/</guid><description>概要 活动主题：Service Mesh Meetup#9 杭州站：To Infinity and Beyond 活动时间：时间：2019 年 12 月 28 日（周六）13:00-17:30 活动地点：杭州西湖区紫霞路</description></item><item><title>SOFAChannel#9：蚂蚁金服 Service Mesh 双十一落地详解</title><link>/activities/sofa-channel-9/</link><pubDate>Tue, 26 Nov 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-9/</guid><description>概要 活动主题：SOFAChannel#9：蚂蚁金服 Service Mesh 双十一落地详解 活动时间：12 月 5 日周四晚 7 点 活动形式：线上直播 直播回看：戳这里 介绍 | SOFAChannel</description></item><item><title>Kubernetes &amp; Cloud Native X Service Mesh Meetup</title><link>/activities/service-mesh-meetup-8/</link><pubDate>Wed, 13 Nov 2019 18:00:00 +0800</pubDate><guid>/activities/service-mesh-meetup-8/</guid><description>概要 活动主题：Kubernetes &amp;amp; Cloud Native X Service Mesh Meetup 活动时间：2019 年 11 月 24 日（星期日）9:30-16:30 活动地点：北京朝阳大望京科技商务园</description></item><item><title>&lt;SOFA:ArkLab/&gt;</title><link>/activities/sofa-ark-lab/</link><pubDate>Wed, 30 Oct 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-ark-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:ArkLab/&amp;gt;是《剖析 | SOFAArk 源码》系列，会逐步详细介</description></item><item><title>&lt;SOFA:RegistryLab/&gt;</title><link>/activities/sofa-registry-lab/</link><pubDate>Tue, 03 Sep 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-registry-lab/</guid><description>| SOFALab &amp;lt;SOFA:Lab/&amp;gt; 源码研究实验室，由 SOFA 团队和源码爱好者们出品，欢迎你的加入~ &amp;lt;SOFA:RegistryLab/&amp;gt;是《剖析 | SOFARegistry 实现原理》系列</description></item><item><title>SOFAChannel#8：从一个例子开始体验 SOFAJRaft</title><link>/activities/sofa-channel-8/</link><pubDate>Thu, 15 Aug 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-8/</guid><description>概要 活动主题：SOFAChannel#8：从一个例子开始体验 SOFAJRaft 活动时间：8 月 29 日周四晚 7 点 活动形式：线上直播 视频回顾：https://tec</description></item><item><title>SOFA Meetup#3 广州站-从开源技术到产品能力</title><link>/activities/sofa-meetup-3/</link><pubDate>Thu, 25 Jul 2019 15:00:00 +0800</pubDate><guid>/activities/sofa-meetup-3/</guid><description>概要 活动主题：SOFA Meetup#3 广州站-从开源技术到产品能力 活动时间：8 月 11 日周日下午 13 点 活动地点：广州市广电平云 B 塔 15F 活动形式：线下活动 报名方式：</description></item><item><title>SOFAChannel#7：扩展 Kubernetes 实现金融级云原生发布部署 - 自定义资源 CAFEDeployment 的背景、实现和演进</title><link>/activities/sofa-channel-7/</link><pubDate>Mon, 08 Jul 2019 16:10:00 +0800</pubDate><guid>/activities/sofa-channel-7/</guid><description>概要 活动主题：SOFAChannel#7：扩展 Kubernetes 实现金融级云原生发布部署 - 自定义资源 CAFEDeployment 的背景、实现和演进 活动时间：7 月 18 日周四晚 7 点 活动形式</description></item><item><title>SOFAChannel#6：轻量级监控分析系统 SOFALookout 原理讲解和功能演示</title><link>/activities/sofa-channel-6/</link><pubDate>Wed, 12 Jun 2019 12:00:00 +0800</pubDate><guid>/activities/sofa-channel-6/</guid><description>概要 活动主题：SOFAChannel#6：轻量级监控分析系统 SOFALookout 原理讲解和功能演示 活动时间：6 月 12 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直</description></item><item><title>KubeCon 上海同场活动 SOFAStack Cloud Native Workshop</title><link>/activities/sofastack-cloud-native-workshop/</link><pubDate>Tue, 04 Jun 2019 10:20:00 +0000</pubDate><guid>/activities/sofastack-cloud-native-workshop/</guid><description>蚂蚁金服 SOFAStack 云原生工作坊（KubeCon China 2019 同场活动） 日期：2019年6月24日，星期一 时间：9:00 – 16:00 地点：上海世博中心 616 房间 注册费：免费</description></item><item><title>SOFA Meetup#2 上海站——使用 SOFAStack 快速构建微服务</title><link>/activities/sofa-meetup-2/</link><pubDate>Tue, 21 May 2019 11:20:00 +0000</pubDate><guid>/activities/sofa-meetup-2/</guid><description>概要 活动主题：SOFA Meetup#2 上海站-使用 SOFAStack 快速构建微服务 活动时间：5 月 26 日周日下午 13 点 活动地点：上海市徐汇区田林路200号A7栋一楼 活动形式：线</description></item><item><title>SOFAChannel#5：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs</title><link>/activities/sofa-channel-5/</link><pubDate>Wed, 08 May 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-5/</guid><description>概要 活动主题：SOFAChannel#5：给研发工程师的代码质量利器 —— 自动化测试框架 SOFAActs 活动时间：5 月 16 日周四晚 7 点 活动形式：线上直播 报名方</description></item><item><title>SOFAChannel#4：分布式事务 Seata TCC 模式深度解析</title><link>/activities/sofa-channel-4/</link><pubDate>Tue, 09 Apr 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-channel-4/</guid><description>概要 活动主题：SOFAChannel#4：分布式事务 Seata TCC 模式深度解析 活动时间：4 月 18 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直播回顾文章 介</description></item><item><title>Soul网关发布1.0.4-RELEASE版本</title><link>/blog/soul_1.0.4/soul_1.0.4/</link><pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate><guid>/blog/soul_1.0.4/soul_1.0.4/</guid><description>Soul网关发布1.0.4-RELEASE版本 修复在1.0.3版本的后台管理中，出现的bug。 配置信息序列化方式支持自定义扩展。默认的序列化</description></item><item><title>Hmily发布2.0.2-RELEASE版本</title><link>/blog/hmily_2.0.2/hmily_2.0.2/</link><pubDate>Fri, 05 Apr 2019 00:00:00 +0000</pubDate><guid>/blog/hmily_2.0.2/hmily_2.0.2/</guid><description>Hmily 发布2.0.2-RELEASE 版本 解决SpringCloud 使用hystrix 配置线程池策略的问题。 新增对springcloud 内嵌事务调</description></item><item><title>SOFA Meetup#1 北京站——服务注册中心、分布式事务重磅发布</title><link>/activities/sofa-meetup-1/</link><pubDate>Mon, 11 Mar 2019 12:10:00 +0800</pubDate><guid>/activities/sofa-meetup-1/</guid><description>概要 活动主题：SOFA Meetup#1 北京站——服务注册中心、分布式事务重磅发布 活动时间：3 月 24 日周日下午 13 点 活动地点：北京中关村创业大街 氪空间 活动形式：</description></item><item><title>SOFAChannel#3：SOFARPC 性能优化（下）—— 手把手带你性能调优（含 Demo）</title><link>/activities/sofa-channel-3/</link><pubDate>Thu, 28 Feb 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-3/</guid><description>概要 活动主题：SOFAChannel#3：SOFARPC 性能优化（下）—— 手把手带你性能调优（含 Demo） 活动时间：2 月 28 日周四晚 7 点 活动形</description></item><item><title>SOFAChannel#2：SOFARPC 性能优化（上）—— 详解优化设计点</title><link>/activities/sofa-channel-2/</link><pubDate>Thu, 21 Feb 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-2/</guid><description>概要 活动主题：SOFAChannel#2：SOFARPC 性能优化（上）—— 详解优化设计点 活动时间：2 月 21 日周四晚 7 点 活动形式：线上直播 直播视</description></item><item><title>SOFAChannel#1——从蚂蚁金服微服务实践谈起</title><link>/activities/sofa-channel-1/</link><pubDate>Thu, 17 Jan 2019 10:20:00 +0000</pubDate><guid>/activities/sofa-channel-1/</guid><description>活动主题：SOFAChannel#1——从蚂蚁金服微服务实践谈起 活动时间：1 月 17 日周四晚 7 点 活动形式：线上直播 直播视频回顾 直播回顾文章 介绍 &amp;</description></item><item><title>Hmily: 轻松搞定高并发分布式事务</title><link>/blog/hmily_current/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_current/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: 高性能异步分布式事务TCC框架</title><link>/blog/hmily_introduction/introduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/blog/hmily_introduction/introduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item><item><title>Dubbo快速体验</title><link>/projects/hmily/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc快速体验</title><link>/projects/hmily/quick-start-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-grpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Grpc用户指南</title><link>/projects/hmily/user-grpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-grpc/</guid><description>Grpc用户指南 目前只支持grpc的一元同步调用 引入jar包 引入hmily配置 在具体的实现方法上（服务提供端），加上@HmilyTCC or HmilyTAC 注</description></item><item><title>Hmily 介绍</title><link>/projects/hmily/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/overview/</guid><description>Hmily是什么？ Hmily是一款高性能，零侵入，金融级分布式事务解决方案，目前主要提供柔性事务的支持，包含 TCC, TAC(自动生成回滚SQL) 方</description></item><item><title>Hmily-Admin</title><link>/projects/hmily/admin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/admin/</guid><description>Hmily-Admin 启动教程（未完成）: admin 是Hmily中查看事务日志的后台管理系统。 可以查看异常的日志，修改重试次数等功能. 首先确保你的项目使用了Hmily并</description></item><item><title>Hmily-Config</title><link>/projects/hmily/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config/</guid><description>配置详解： 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf</description></item><item><title>Hmily-Config-Apollo</title><link>/projects/hmily/config-apollo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-apollo/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Consul</title><link>/projects/hmily/config-consul/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-consul/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Etcd</title><link>/projects/hmily/config-etcd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-etcd/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Local</title><link>/projects/hmily/config-local/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-local/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Nacos</title><link>/projects/hmily/config-nacos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-nacos/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Config-Zookeeper</title><link>/projects/hmily/config-zookeeper/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/config-zookeeper/</guid><description>本地配置 文件名为 : hmily.yml。 路径： 默认路径为项目的 resource目录下，也可以使用 -Dhmily.conf 指定，也可以把配置放在 user.dir 目录下。 优先级别 -Dhmily.conf &amp;gt;</description></item><item><title>Hmily-Context</title><link>/projects/hmily/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/context/</guid><description>HmilyTransactionContext事务上下文 @Data public class HmilyTransactionContext { /** * transId. */ private Long transId; /** * participant id. */ private Long participantId; /** * participant ref id. */ private Long participantRefId; /** * this hmily action. */ private int action; /** * 事务</description></item><item><title>Hmily-Metrics</title><link>/projects/hmily/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/metrics/</guid><description>Metrics 目前hmily的metrics模块，采用 prometheus来进行采集，使用pull模式对外暴露metrics信息接口。 收集的metric</description></item><item><title>Hmily-TCC</title><link>/projects/hmily/tcc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tcc/</guid><description>TCC TCC模式是经典的柔性事务解决方案，需要使用者提供 try, confirm, cancel 三个方法， 真正的情况下会执行 try, confirm, 异常情况下会执行try, cancel。 confirm 方法并不是</description></item><item><title>Hmily-annotation</title><link>/projects/hmily/annotation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/annotation/</guid><description>@Hmily /** * The annotation Hmily. * * @author xiaoyu */ @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface Hmily { } 该注解为hmily分布式事务接口标识，表示该接口参与hmily分布式事务 @HmilyTCC @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.METHOD) public @interface HmilyTCC { /** * Confirm method string. * * @return the</description></item><item><title>Hmily-code-conduct</title><link>/projects/hmily/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/code-conduct/</guid><description>开发理念 用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理</description></item><item><title>Hmily-committer</title><link>/projects/hmily/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 hmily仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码重构</description></item><item><title>Hmily-contributor</title><link>/projects/hmily/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>Hmily-tac</title><link>/projects/hmily/tac/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/tac/</guid><description>TAC TAC模式其实是TCC模式的变种,顾名思义 TAC 模式被称为自动回滚,相比于 TCC模式，用户完全不用关心 回滚方法如何去写，减少了用户的开发量，对</description></item><item><title>Motan快速体验</title><link>/projects/hmily/quick-start-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-motan/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>Motan用户指南</title><link>/projects/hmily/user-motan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-motan/</guid><description>Motan接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Motan</description></item><item><title>Myth 介绍</title><link>/projects/myth/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/myth/overview/</guid><description>myth 采用消息队列解决分布式事务的开源框架, 基于java语言来开发（JDK1.8），支持dubbo，springcloud,motan等rpc框</description></item><item><title>Raincat 介绍</title><link>/projects/raincat/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/overview/</guid><description>Raincat 强一致性分布式事务，是基于二阶段提交+本地事务补偿机制来实现。原理介绍 基于java语言来开发（JDK1.8），支持dubbo,motan,</description></item><item><title>SOFABoot 动态模块实践</title><link>/guides/kc-sofastack-dynamic-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-sofastack-dynamic-demo/</guid><description/></item><item><title>SpringCloud快速体验</title><link>/projects/hmily/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-demo</description></item><item><title>SpringCloud用户指南</title><link>/projects/hmily/user-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-springcloud/</guid><description>Spring-Cloud 用户指南 步骤一: 引入依赖jar包 步骤二：引入hmily配置 步骤三：在具体的实现方法上（服务提供端），加上HmilyTCC or HmilyTAC 注解 步骤四：在</description></item><item><title>TxTransactionBootstrap配置详解</title><link>/projects/raincat/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/config/</guid><description>@TxTransaction annotation详解 该注解为分布式事务的切面（AOP point），如果业务方的service服务需要参与分布式事务，则需要加上此注解。</description></item><item><title>context-path-mapping插件</title><link>/projects/soul/context-path-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/context-path-plugin/</guid><description>说明 soul网关在对目标服务调用的时候，还容许用户使用 context_path 插件来重写请求路径的contextPath 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; context_path 设置为开启。 在网</description></item><item><title>divide插件</title><link>/projects/soul/divide-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/divide-plugin/</guid><description>说明 divide插件是网关处理 http协议请求的核心处理插件。 插件设置 开启插件，soul-admin &amp;ndash;&amp;gt; 插件管理&amp;ndash;&amp;gt; divide 设置为</description></item><item><title>dubbo 快速体验</title><link>/projects/raincat/quick-start-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-dubbo/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git redis mysql 代码拉取 &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 或者eclipse 打开项目。 修</description></item><item><title>dubbo接入soul网关</title><link>/projects/soul/dubbo-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dubbo-proxy/</guid><description>说明 此篇文章是dubbo用户使用dubbo插件支持，以及自己的dubbo服务接入soul网关的教程。 支持 alibaba dubbo（&amp;lt; 2.7.x） 以</description></item><item><title>dubbo插件</title><link>/projects/soul/dubbo-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dubbo-plugin/</guid><description>说明 dubbo插件是将http协议 转换成dubbo协议 的插件，也是网关实现dubbo泛化调用的关键。 dubbo插件需要配合元数据才能实现du</description></item><item><title>dubbo用户指南</title><link>/projects/hmily/user-dubbo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-dubbo/</guid><description>Dubbo接口部分 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } Dubbo</description></item><item><title>dubbo用户指南</title><link>/projects/raincat/dubbo-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/dubbo-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的dubbo服务端添加jar包，并在需要参与分布</description></item><item><title>filter扩展</title><link>/projects/soul/custom-filter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-filter/</guid><description>说明 本文是说明如何进行 org.springframework.web.server.WebFliter 的扩展。 跨域支持 新增 org.dromara.soul.bootstrap.cors.CrossFilter 实现 WebFilter。 public class CrossFilter implements WebFilter { private static final String ALLOWED_HEADERS = &amp;quot;x-requested-with, authorization, Content-Type, Authorization, credential, X-XSRF-TOKEN,token,username,client&amp;quot;; private static final String ALLOWED_METHODS = &amp;quot;*&amp;quot;; private static final String ALLOWED_ORIGIN = &amp;quot;*&amp;quot;; private static final</description></item><item><title>http用户</title><link>/projects/soul/http-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/http-proxy/</guid><description>说明 本文旨在帮助http用户。 soul网关使用 divide 插件来处理http请求。请求在soul-admin后台开启它。 接入前，请正确的启动 soul-</description></item><item><title>hystrix插件</title><link>/projects/soul/hystrix-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/hystrix-plugin/</guid><description>说明 hystrix插件是网关用来对流量进行熔断的核心实现。 使用信号量的方式来处理请求。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; hystrix，设置为开启。 如</description></item><item><title>monitor插件</title><link>/projects/soul/monitor-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/monitor-plugin/</guid><description>说明 monitor插件是网关用来监控自身运行状态（JVM相关），请求的响应迟延，QPS、TPS等相关metrics。 技术方案 流程图 异步或者同</description></item><item><title>motan用户指南</title><link>/projects/raincat/motan-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/motan-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的服务端添加jar包，并在需要参与分布式事务的方</description></item><item><title>rateLimiter插件</title><link>/projects/soul/ratelimiter-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/ratelimiter-plugin/</guid><description>说明 限流插件，是网关对流量管控限制核心的实现。 可以到接口级别，也可以到参数级别，具体怎么用，还得看你对流量配置。 技术方案 采用redis令牌桶</description></item><item><title>resilience4j插件</title><link>/projects/soul/resilience4j-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/resilience4j-plugin/</guid><description>说明 resilience4j插件是网关用来对流量进行限流与熔断的可选选择之一。 resilience4j为网关熔断限流提供能力。 插件设置 在 soul-admin &amp;ndash;&amp;gt;</description></item><item><title>rewrite插件</title><link>/projects/soul/rewrite-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/rewrite-plugin/</guid><description>说明 soul网关在对目标服务进行代理调用的时候，还容许用户使用 rewrite 插件来重写请求路径 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; rewrite，设置为开启。 在网关</description></item><item><title>sentinel插件</title><link>/projects/soul/sentinel-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sentinel-plugin/</guid><description>说明 sentinel插件是网关用来对流量进行限流与熔断的可选选择之一。 sentinel为网关熔断限流提供能力。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; sen</description></item><item><title>sign插件</title><link>/projects/soul/sign-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sign-plugin/</guid><description>说明 sign插件是 soul网关自带的，用来对请求进行签名认证的插件。 插件设置 在 soul-admin -&amp;gt; 插件管理中 &amp;ndash;&amp;gt; sign插件设置为开启。 插件使用 在网关的 pom.xml 文件</description></item><item><title>sofa-rpc快速体验</title><link>/projects/hmily/quick-start-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-rpc/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 打开项目，找到hmily-dem</description></item><item><title>sofa-rpc用户指南</title><link>/projects/hmily/user-rpc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-rpc/</guid><description>sofa-rpc接口项目 在你的接口项目中引入jar包。 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.dromara&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hmily-annotation&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;{last.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 在需要进行Hmily分布式事务的接口方法上加上 @Hmily 标识。 public interface HelloService { @Hmily void say(String hello); } so</description></item><item><title>sofa接入soul网关</title><link>/projects/soul/sofa-rpc-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sofa-rpc-proxy/</guid><description>说明 此篇文章是sofa用户使用sofa插件支持，以及自己的sofa服务接入soul网关的教程。 接入前，请正确的启动 soul-admin以及搭</description></item><item><title>sofa插件</title><link>/projects/soul/sofa-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/sofa-plugin/</guid><description>说明 sofa插件是将http协议 转换成sofa协议 的插件，也是网关实现sofa泛化调用的关键。 sofa插件需要配合元数据才能实现dubbo的</description></item><item><title>soul-code-conduct</title><link>/projects/soul/code-conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/code-conduct/</guid><description>开发理念 用心 保持责任心和敬畏心，以工匠精神持续雕琢。 可读 代码无歧义，通过阅读而非调试手段浮现代码意图。 整洁 认同《重构》和《代码整洁之道》的理</description></item><item><title>soul-committer</title><link>/projects/soul/committer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/committer/</guid><description>提交者提名 当你做了很多贡献以后，社区会进行提名。 成为committer你会拥有 soul仓库写的权限 idea 正版使用 提交者责任 开发新功能； 代码重构；</description></item><item><title>soul-contributor</title><link>/projects/soul/contributor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/contributor/</guid><description>您可以报告bug，提交一个新的功能增强建议或者直接对以上内容提交改进补丁。 提交issue 在提交issue之前，请经过充分的搜索，确定该iss</description></item><item><title>soul介绍</title><link>/projects/soul/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/overview/</guid><description>What is the Soul？ 这是一个异步的，高性能的，跨语言的，响应式的API网关。我希望能够有一样东西像灵魂一样，保护您的微服务。参考了Kong，Sp</description></item><item><title>soul性能优化</title><link>/projects/soul/soul-optimize/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/soul-optimize/</guid><description>说明 本文主要介绍如果对soul进行优化 本身消耗 soul本身所有的操作，都是基于jvm内存来匹配，本身消耗时间大概在 1-3 ms左右。 底层netty</description></item><item><title>springCloud接入soul网关</title><link>/projects/soul/spring-cloud-proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/spring-cloud-proxy/</guid><description>说明 此篇文章是教你如何将springCloud接口，快速接入到soul网关。 请在 soul-admin 后台将 springCloud 插件设置为开启。 接入前，请正确的启动 soul-ad</description></item><item><title>springcloud快速体验</title><link>/projects/raincat/quick-start-springcloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/quick-start-springcloud/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git redis mysql 代码拉取 &amp;gt; git clone https://github.com/yu199195/Raincat.git &amp;gt; cd Raincat &amp;gt; mvn -DskipTests clean install -U ### 执行demo 模块的sql语句。 sql语句 使用你的工具 idea 或者eclipse 打开项目。</description></item><item><title>springcloud插件</title><link>/projects/soul/spring-cloud-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/spring-cloud-plugin/</guid><description>说明 该插件是用来将http协议 转成springCloud协议 的核心。 引入网关 springCloud的插件支持 在网关的 pom.xml 文件中引入如下依赖。 &amp;lt;!--soul</description></item><item><title>springcloud用户指南</title><link>/projects/raincat/springcloud-user/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/springcloud-user/</guid><description>首先启动raincat-manager，具体怎么启动参考 启动manager jar包依赖，在你的服务端添加jar包，并在需要参与分布式事务的方</description></item><item><title>tars快速体验</title><link>/projects/hmily/quick-start-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/quick-start-tars/</guid><description>环境准备 JDK 1.8+ Maven 3.2.x Git Zookeeper 代码拉取 &amp;gt; git clone https://github.com/dromara/hmily.git &amp;gt; cd hmily &amp;gt; mvn -DskipTests clean install -U 执行demo 模块的sql语句。 sql语句 建立tars节点 根据此文在当前tars平台建立</description></item><item><title>tars用户指南</title><link>/projects/hmily/user-tars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/user-tars/</guid><description>Tars用户指南 引入jar包 引入hmily配置 在需要进行Hmily分布式事务的自动生成的Servant接口方法上加上 @Hmily 标识。 在具体的实现方法</description></item><item><title>waf插件</title><link>/projects/soul/waf-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/waf-plugin/</guid><description>说明 waf插件，是网关的用来对流量实现防火墙功能的核心实现。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理-&amp;gt; waf 设置为开启。 如果用户不想使用此功能，请在adm</description></item><item><title>websocket支持</title><link>/projects/soul/websocket-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/websocket-plugin/</guid><description>说明 soul网关是支持 websocket的代理。 websocket支持中，使用了divide插件。 插件设置 在 soul-admin &amp;ndash;&amp;gt; 插件管理 &amp;ndash;&amp;gt; divide，设置</description></item><item><title>使用 CloudMesh 轻松实践 Service Mesh</title><link>/guides/kc-cloud-mesh-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-cloud-mesh-demo/</guid><description/></item><item><title>使用 SOFAStack 快速构建微服务</title><link>/guides/sofastack-quick-start/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/sofastack-quick-start/</guid><description/></item><item><title>使用 Seata 保障支付一致性</title><link>/guides/kc-seata-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-seata-demo/</guid><description/></item><item><title>使用不同的数据同步策略</title><link>/projects/soul/use-data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/use-data-sync/</guid><description>说明 数据同步是指将 soul-admin 配置的数据，同步到 soul 集群中的JVM内存里面，是网关高性能的关键。 实现原理，请看：数据同步。 文中所说的网关，是指你搭建的网</description></item><item><title>元数据概念设计</title><link>/projects/soul/meta-data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/meta-data/</guid><description>说明 本篇主要讲解在soul网关中元数据的概念，设计，以及如何对接。 技术方案 在数据库中，新增了一张表，然后通过数据同步的方案，会把这张表的数据</description></item><item><title>启动raincat-admin</title><link>/projects/raincat/admin-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/admin-starter/</guid><description>raincat-admin 启动教程 启动前提：分布式事务项目已经部署并且运行起来，用户根据自己的RPC框架进行使用 dubbo 用户 springcloud 用户 启动方式一：自己打包进行部署。 首先用户使</description></item><item><title>启动raincat-manager</title><link>/projects/raincat/raincat-manager-starter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/raincat/raincat-manager-starter/</guid><description>启动raincat-manager 方式一：自己拉取代码编译：https://github.com/yu199195/Raincat 修改app</description></item><item><title>团队介绍</title><link>/projects/hmily/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/team/</guid><description>团队成员（排名不分先后） 名字 github 角色 所在公司 肖宇 yu199195 VP 京东 张永伦 tuohai666 committer 京东 赵俊 cherrylzhao committer 联通 陈斌 prFor committer 某创业公司 李浪 cysy-lli committer 携程 汤煜冬 tydhot committer perfma</description></item><item><title>团队介绍</title><link>/projects/soul/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/team/</guid><description>团队成员（排名不分先后） |名字 | github | 角色 | 所在公司 | |:&amp;mdash;&amp;mdash;&amp;ndash; |:&amp;mdash;&amp;ndash; |:&amp;mdash;&amp;mdash;-: |:&amp;mdash;&amp;mdash;-:| |肖宇 |yu199195 | VP | 京东 | |张永伦 |tuohai666 | PMC | 京东 | |邓力铭 |dengliming | PMC | 某创业公司 | |汤昱东 |tydhot</description></item><item><title>基于 Serverless 轻松构建云上应用</title><link>/guides/kc-serverless-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/kc-serverless-demo/</guid><description/></item><item><title>多语言http客户端</title><link>/projects/soul/developer-soul-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/developer-soul-client/</guid><description>说明 本文主要讲解其他语言的http服务如何接入网关。 如何自定义开发 soul-http-client 自定义开发 请求方式：POST 请求路径 http://soul-admin/soul-client/springmvc-register soul-admin，表示为 adm</description></item><item><title>字典管理</title><link>/projects/soul/dictionary-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/dictionary-management/</guid><description>说明 字典管理主要用来维护和管理公用数据字典 表设计 sql sql CREATE TABLE IF NOT EXISTS `soul_dict` ( `id` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;主键id&#39;, `type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;类型&#39;, `dict_code` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT &#39;字典编</description></item><item><title>插件处理详解</title><link>/projects/soul/plugin-handle-explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/plugin-handle-explanation/</guid><description>说明 在soul-admin后台，每个插件都用handle（json格式）字段来表示不同的处理，而插件处理是就是用来管理编辑json里面的自定</description></item><item><title>插件扩展</title><link>/projects/soul/custom-plugin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-plugin/</guid><description>说明 插件是 soul 网关的核心执行者，每个插件在开启的情况下，都会对匹配的流量，进行自己的处理。 在soul 网关里面，插件其实分为2 类： 一类是单一职责</description></item><item><title>数据同步设计</title><link>/projects/soul/data-sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/data-sync/</guid><description>说明 本篇主要讲解数据库同步的三种方式，以及原理 前言 网关是流量请求的入口，在微服务架构中承担了非常重要的角色，网关高可用的重要性不言而喻。在使</description></item><item><title>数据库设计</title><link>/projects/soul/database-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/database-design/</guid><description>插件采用数据库设计，来存储插件，选择器，规则配置数据，以及对应关系。 数据库表UML类图: 设计详解: 一个插件对应多个选择器，一个选择器对应多个</description></item><item><title>文件上传下载</title><link>/projects/soul/file-and-image/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/file-and-image/</guid><description>说明 本文主要介绍soul的文件上传下载的支持。 文件上传 默认限制文件大小为10M。 如果想修改，在启动服务的时候，使用--file.size = 3</description></item><item><title>术语</title><link>/projects/hmily/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/term/</guid><description>术语 发起者：全局事务的发起者，在一个请求链路资源方法里面，最先需要对分布式资源进行事务处理的地方，在Hmily框架里面 可以表示为：一个请求最</description></item><item><title>正确获取Ip与host</title><link>/projects/soul/custom-parsing-ip-and-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-parsing-ip-and-host/</guid><description>说明 本文是说明，如果网关前面有一层nginx 的时候，如何获取正确的ip与端口。 获取正确的之后，在插件以及选择器中，可以根据 ip，与host来</description></item><item><title>环境搭建</title><link>/projects/soul/soul-set-up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/soul-set-up/</guid><description>说明 soul 2.2.0以后都是基于插件化可插拔的思想，本文是说明如何基于soul搭建属于你自己网关。 请确保你的机器安装了JDK 1.8+，Mysql</description></item><item><title>线程模型</title><link>/projects/soul/thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/thread/</guid><description>说明 本文主要介绍soul的线程模型，以及各种场景的使用。 io与work线程 soul内置依赖 spring-webflux 而其底层是使用的netty，这一块只要是使用的n</description></item><item><title>自定义sign插件检验</title><link>/projects/soul/custom-sign-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-sign-algorithm/</guid><description>说明 用户可以自定义签名认证算法来实现验证。 扩展 默认的实现为 org.dromara.soul.plugin.sign.service.Defa</description></item><item><title>自定义网关返回数据格式</title><link>/projects/soul/custom-result/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/custom-result/</guid><description>说明 本文是说明基于soul网关返回自定义的数据个数。 网关需要统一的返回格式，而每个公司都有自己定义的一套，所以需要对次进行扩展。 默认实现 默认</description></item><item><title>选择器规则详解</title><link>/projects/soul/selector-and-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/selector-and-rule/</guid><description>说明 选择器和规则是soul网关中最灵魂的东西。掌握好它，你可以对任何流量进行管理。 本篇主要详解soul网关中，选择器与规则的概念，以及如何使</description></item><item><title>配置流程介绍</title><link>/projects/soul/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/soul/config/</guid><description>说明 本篇是对admin后台操作数据以后，同步到网关的流程介绍。 使用 用户可以在 soul-admin 后台任意修改数据，并马上同步到网关的jvm内存中。 同步soul</description></item><item><title>问题</title><link>/projects/hmily/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/projects/hmily/faq/</guid><description>我引用了jar包，发现启动不了，报错怎么办？ 答：这种需要你自己去定位问题，查看是否按照文档来进行配置，环境是否正确，是否有依赖冲突问题，实在</description></item></channel></rss>