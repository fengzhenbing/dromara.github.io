<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dromara(Open source organization)</title><link>/zh/blog/</link><description>Recent content on dromara(Open source organization)</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/zh/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Soul网关学习divide插件源码解读</title><link>/zh/blog/soul_source_learning_16_divide_sxj/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_16_divide_sxj/</guid><description>插件概述 插件定位 divide 插件是一个 http 正向代理插件，所有的 http 请求都由该插件进行负载均衡处理（具体的负载均衡策略在规则中指定）。 生效时机 当请求头的 rpcType =</description></item><item><title>Soul网关学习RateLimiter插件原理解析</title><link>/zh/blog/soul_source_learning_18_ratelimiter/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_18_ratelimiter/</guid><description>回顾 在之前的HTTP请求初探的文章中，大体梳理了Soul插件的处理流程，也得知了DividePlugin、GlobalPlugin，WebC</description></item><item><title>Soul网关学习SPI学习使用</title><link>/zh/blog/soul_source_learning_11_spi/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_11_spi/</guid><description>SOUL 中 SPI 的使用 在之前分析 divide 插件的负载均衡策略时, 有看到过一行代码: DivideUpstream divideUpstream = LoadBalanceUtils.selector(upstreamList, ruleHandle.getLoadBalance(), ip); 当时很简单的略过了它的实现, 它的作用很容易分析, 调用一个看似工具</description></item><item><title>Soul网关学习Sign插件</title><link>/zh/blog/soul_source_learning_12_sign/</link><pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_12_sign/</guid><description>介绍 sign插件用来对请求进行签名认证的插件 AK/SK 介绍 AK/SK（Access Key ID/Secret Access Key）即访问密钥，包含访问密钥ID（AK）和秘密访问密钥（</description></item><item><title>Soul网关学习Http长轮询解析02</title><link>/zh/blog/soul_source_learning_09_httplongpolling_02/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_09_httplongpolling_02/</guid><description>后台与网关数据同步 (Http长轮询篇) 长轮询分析的最后一篇, 总结网关端的长轮询的实现, 以及数据流动方式. 网关端长轮询的流程总体也分两个模块:</description></item><item><title>Soul网关学习Http请求探险</title><link>/zh/blog/soul_source_learning_17_http/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_17_http/</guid><description>回顾 在Soul 请求处理概览概览这篇文章中，我们已经知晓了Soul针对于请求的处理入库在DefaultSoulPluginChain的excu</description></item><item><title>Soul网关学习Nacos数据同步</title><link>/zh/blog/soul_source_learning_14_nacos/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_14_nacos/</guid><description>本篇分析一下Nacos同步数据原理 1、先配置一下环境 * soul-admin soul-admin/src/main/resources/application.yml soul: sync: nacos: url: localhost:8848 namespace: 1c10d748-af86-43b9-8265-75f487d20c6c # acm: # enabled: false # endpoint: acm.aliyun.com # namespace: # accessKey: # secretKey: soul-admin/pom.xml，这</description></item><item><title>Soul网关学习Http长轮询解析01</title><link>/zh/blog/soul_source_learning_08_httplongpolling_01/</link><pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_08_httplongpolling_01/</guid><description>后台与网关数据同步 (Http长轮询篇) 配置 后台信息模式切换 在上篇分析 Zookeeper 同步的文章 (Soul网关源码分析-11期) 中, 我们通过 DataSyncConfiguration 这个配置类做的</description></item><item><title>Soul网关学习WebSocket数据同步解析</title><link>/zh/blog/soul_source_learning_10_websocket/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_10_websocket/</guid><description>范金鹏 1.前情回顾 在第4篇中，我们分析了 HTTP 用户业务系统接入 Soul 网关后，会调用 soul-admin 的注册接口，把需要网关代理的接口信息全部注册到 soul-admin 上，在最后，会通</description></item><item><title>Soul网关学习Zookeeper数据同步02</title><link>/zh/blog/soul_source_learning_13_zookeeper_02/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_13_zookeeper_02/</guid><description>启动admin，与网关。 admin操作，使用zookeeper同步数据到网关 上一篇，通过soul-admin启动过程为入口，分析了soul-</description></item><item><title>Soul网关学习插件链实现</title><link>/zh/blog/soul_source_learning_15_plugin_chain/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_15_plugin_chain/</guid><description>一、引言 插件是 Soul 的灵魂。 Soul 使用了插件化设计思想，实现了插件的热插拔，且极易扩展。内置丰富的插件支持，鉴权，限流，熔断，防火墙等等。 Soul 是如何实</description></item><item><title>Soul网关学习Admin源码分析</title><link>/zh/blog/soul_resource_learning_07_admin/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_resource_learning_07_admin/</guid><description>源码分析 页面操作源码分析 在分析源码之前，先看下图，页面显示加载的插件列表会对应后端的请求，根据后端请求，找到对应的controller类 然后</description></item><item><title>Soul网关学习Zookeeper数据同步01</title><link>/zh/blog/soul_source_learning_13_zookeeper_01/</link><pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_13_zookeeper_01/</guid><description>启动 soul-admin、soul-bootstrap， 使用zookeeper同步数据到网关 一、配置环境 1、soul-admin 服务配置，需</description></item><item><title>Soul网关学习(2-3)Http客户端接入源码解析</title><link>/zh/blog/soul_source_learning_02_http_client_register/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_http_client_register/</guid><description>HTTP 用户接入 Soul 网关注册逻辑分析 1. 注册入口 HTTP 用户接入 Soul 网关时，会调用 soul-admin 一个接口，把需要 Soul 网关管理的接口注册，今天就具体看看到底干了点儿啥。 先看下</description></item><item><title>Soul网关学习(2-2)Http代理之divide插件源码解析</title><link>/zh/blog/soul_source_learning_02_divide_plugin_source/</link><pubDate>Sun, 17 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_divide_plugin_source/</guid><description>Divide 插件如何转发http请求 先来设想一下，网关如果收到了一个请求http://xxx.com/openapi/appname/order/fi</description></item><item><title>Soul网关学习(2-1)Http代理之divide插件使用</title><link>/zh/blog/soul_source_learning_02_divide_plugin/</link><pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_02_divide_plugin/</guid><description>Divide 插件使用 一、启动项目 先启动soul-bootstrap（9195）、soul-admin（9095）两个模块，我们通过bootstrap配</description></item><item><title>Soul网关学习(1)环境配置</title><link>/zh/blog/soul_source_learning_01/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_01/</guid><description>Soul源码分析（1） 环境配置 soul is a High-Performance Java API Gateway GitHub：https://github.com/dromara/soul 官方文档：https</description></item><item><title>Soul网关学习插件链与负载均衡解析</title><link>/zh/blog/soul_source_learning_05_plugin/</link><pubDate>Fri, 15 Jan 2021 00:00:00 +0000</pubDate><guid>/zh/blog/soul_source_learning_05_plugin/</guid><description>插件链总结 从一个类关系图说起: 其中两个最基本的插件类: SoulPlugin: 定义插件职责的接口, 重点方法execute() 被上层调用, skip() 方法可以使某些插件在某些</description></item><item><title>Hmily: 轻松搞定高并发分布式事务</title><link>/zh/blog/hmily_current/</link><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid>/zh/blog/hmily_current/</guid><description>Hmily高并发事务处理 开始先打个小小的广告 Hmily在参开源中国年度受欢迎投票 https://www.oschina.net/project/top_cn_2018?origin=zhzd 点击链接，搜索Hmily帮忙投下票,在第11横排第二个，感</description></item><item><title>Hmily: 高性能异步分布式事务TCC框架</title><link>/zh/blog/hmily_introduction/</link><pubDate>Tue, 25 Sep 2018 00:00:00 +0000</pubDate><guid>/zh/blog/hmily_introduction/</guid><description>Hmily框架特性[https://github.com/yu199195/hmily] 无缝集成Spring,Spring boot start。 无缝</description></item></channel></rss>